{"version":3,"sources":["images/3.jpg","images/1.jpg","images/2.jpg","images/author.png","utils/httpService.js","utils/constants.js","components/auth.jsx","components/modal.jsx","components/login.jsx","components/menu.jsx","components/carousel.jsx","components/authorCard.jsx","components/KEEMPrinciples.jsx","components/home.jsx","utils/helpers.js","components/chart.jsx","components/emissionsBarChart.jsx","components/dateRangePicker.jsx","components/emissionsChartModal.jsx","components/polygons.jsx","components/points.jsx","components/submitForm.jsx","components/addPointModal.jsx","components/addPolygonModal.jsx","components/filtration.jsx","components/map.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","post","url","body","a","axios","get","put","MAP_CENTER_COORDS","Auth","props","React","useState","login","setLogin","password","setPassword","Container","Row","className","Col","xs","Form","Group","controlId","Label","Control","type","placeholder","value","onChange","e","target","Button","variant","onClick","then","user","data","onHide","setUser","sessionStorage","setItem","JSON","stringify","alert","VerticallyCenteredModal","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","header","Body","children","Footer","Login","modalShow","setModalShow","Fragment","show","MenuView","Nav","Item","to","NavDropdown","title","user_name","expert_name","removeItem","CarouselView","Carousel","src","img1","alt","Caption","img2","img3","AuthorCard","Card","Img","author","Text","KEEMPrinciples","ListGroup","Home","getElementName","emissions","emissionId","Set","filter","idElement","Number","map","short_name","removeObjectDuplicates","items","prop","obj","index","arr","mapObj","indexOf","COLORS","Chart","dataForView","item","toFixed","width","height","cx","cy","label","labelLine","outerRadius","fill","dataKey","isAnimationActive","entry","key","length","initialState","elementId","year","EmissionsBarChart","setElementId","setYear","elementName","transformedEmissions","elementIds","transformedData","forEach","ValueAvg","ValueMax","Year","Month","avg","max","transformEmissions","formattedMonthData","Object","keys","month","average","formatMonthDataForBarChart","Dropdown","Toggle","Menu","active","transformedYear","margin","top","right","left","bottom","strokeDasharray","DateRangePickerView","param","setEmissionCalculations","startDate","Date","endDate","addDays","state","setState","useEffect","date","toISOString","locale","uk","selection","showSelectionPreview","moveRangeOnFirstSelection","months","ranges","direction","EmissionsChartModal","isPoint","emissionCalculations","getEmissionCalculations","chartAverageData","emission","name","element","averageCalculations","chartMaxData","maximumCalculations","Table","exceedingByAverage","gdkAverage","exceedingByMaximum","gdkMax","idEnvironment","measure","Polygons","polygons","setPolygonId","setIsEditPolygonMode","setShowPolygonModal","showEmissionsChartModal","setShowEmissionsChartModal","poligonId","polygonPoints","brushColorR","brushColorG","brushColorB","Polygon","positions","color","Popup","maxWidth","icon","faPencilAlt","striped","bordered","hover","environmentName","day","Measure","Points","points","setShowPointModal","setPointId","setIsEditPointMode","Id","coordinates","description","Description","image","Image","owner_type","Marker","position","Icon","iconUrl","iconSize","handleClick","now","getFullYear","getMonth","slice","getDate","form","environment","valueAvg","valueMax","gdk","code","SubmitForm","onSave","isActive","setIsActive","buttonText","environments","setEnvironments","selectedEnvironment","setEnvironment","setDate","setAvgValue","gdkAvg","setGdkAvg","setMaxValue","setGdkMax","elements","setElements","selectedElement","setElement","setMeasure","clearForm","disabled","min","Alert","style","overflowY","selectElement","split","ownerType","emptyState","AddPointModal","setShouldFetchData","isEditPointMode","pointId","setName","setDescription","setType","setOwnerType","types","setTypes","ownerTypes","setOwnerTypes","hide","find","typeOfObject","as","rows","owner_type_id","catch","id_of_user","brushColor","r","g","b","lineThickness","AddPolygonModal","setNewPolygonCoordinates","isEditPolygonMode","polygonId","setLineThickness","setColor","line_thickness","brush_color_r","bruch_color_g","brush_color_b","brush_alfa","onChangeComplete","rgb","line_collor_r","line_color_g","line_color_b","line_alfa","id_of_expert","point","latitude","lat","longitude","lng","order123","Filtration","filtrationForm","setFilteredItems","existingExperts","setExistingExperts","onSubmit","preventDefault","expertCheckboxes","expertCheckbox","myCheckbox","selectedExperts","Array","from","checked","isMyObjectsSelectionChecked","ref","expert","Check","expertName","filteredPolygons","filteredItems","filteredPoints","isAddPointModeEnabled","isAddPolygonModeEnabled","showPointModal","showPolygonModal","newPointCoordinates","newPolygonCoordinates","shouldFetchData","geographicalObj","isModeEnabled","MapView","setFilteredPoints","setAddPointMode","setNewPointCoordinates","setFilteredPolygons","setAddPolygonMode","northLatitude","southLatitude","westLongitude","eastLongitude","mapCoordinates","setMapCoordinates","filterByExpert","idOfExpert","some","filterByUser","idOfUser","pointsUrl","values","every","coordinate","fetchData","myPolygons","myPoints","updateMapParams","mapBounds","parsedCoordinates","_northEast","_southWest","center","zoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","latlng","onMouseup","getBounds","onZoomEnd","TileLayer","Navbar","expand","App","parse","getItem","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b90e000.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/3.6f3cce1c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1.15f33718.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.4b150143.jpg\";","module.exports = __webpack_public_path__ + \"static/media/author.f7f17eba.png\";","import axios from 'axios';\r\n\r\nasync function post(url, body) {\r\n  return axios.post(url, body);\r\n}\r\n\r\nasync function get(url) {\r\n  return axios.get(url);\r\n}\r\n\r\nasync function put(url, body) {\r\n  return axios.put(url, body);\r\n}\r\n\r\nexport { post, get, put };\r\n","export const LOGIN_URL = '/login';\r\nexport const POLYGONS_URL = '/polygons';\r\nexport const POLYGON_URL = '/polygon';\r\nexport const POINTS_URL = '/points';\r\nexport const POINT_URL = '/point';\r\nexport const TYPE_OF_OBJECT_URL = '/typeofobjects';\r\nexport const EXPERTS_URL = '/experts';\r\nexport const ENVIRONMENTS_URL = '/environments';\r\nexport const ELEMENTS_URL = '/elements';\r\nexport const GDK_URL = '/gdk';\r\nexport const EMISSIONS_CALCULATIONS_URL = '/emissionscalculations';\r\nexport const OWNER_TYPES_URL = '/ownertypes';\r\n\r\nexport const MAP_CENTER_COORDS = [49.0139, 31.2858];\r\nexport const OPEN_STREET_MAP_URL = 'http://{s}.tile.osm.org/{z}/{x}/{y}.png';\r\n","import React from 'react';\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap';\r\n\r\nimport { post } from '../utils/httpService';\r\nimport { LOGIN_URL } from '../utils/constants';\r\n\r\nexport const Auth = (props) => {\r\n  const [login, setLogin] = React.useState('');\r\n  const [password, setPassword] = React.useState('');\r\n\r\n  const loginUser = () => {\r\n    post(LOGIN_URL, {\r\n      login: login,\r\n      password: password\r\n    }).then(({ data: user }) => {\r\n      if (user) {\r\n        props.onHide();\r\n        props.setUser(user);\r\n        sessionStorage.setItem('user', JSON.stringify(user));\r\n      } else {\r\n        alert('Incorrect login/password');\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row className='justify-content-center'>\r\n        <Col xs={6}>\r\n          <Form>\r\n            <Form.Group controlId='formUsername'>\r\n              <Form.Label>Username</Form.Label>\r\n              <Form.Control\r\n                type='input'\r\n                placeholder='Enter username'\r\n                value={login}\r\n                onChange={(e) => setLogin(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='formBasicPassword'>\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type='password'\r\n                placeholder='Password'\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n            <Button variant='primary' onClick={loginUser}>\r\n              Login\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\nexport const VerticallyCenteredModal = (props) => (\r\n  <Modal\r\n    {...props}\r\n    size={props.size || 'lg'}\r\n    aria-labelledby='contained-modal-title-vcenter'\r\n    centered\r\n  >\r\n    <Modal.Header closeButton>\r\n      <Modal.Title id='contained-modal-title-vcenter'>\r\n        {props.header}\r\n      </Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body>{props.children}</Modal.Body>\r\n    <Modal.Footer>\r\n      <Button onClick={props.onHide}>Close</Button>\r\n    </Modal.Footer>\r\n  </Modal>\r\n);\r\n","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport { Auth } from './auth';\r\nimport { VerticallyCenteredModal } from './modal';\r\n\r\nexport const Login = (props) => {\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button variant='primary' onClick={() => setModalShow(true)}>\r\n        Log In\r\n      </Button>\r\n      <VerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        header=\"Увійти до персонального акаунту\"\r\n      >\r\n        <Auth onHide={() => setModalShow(false)} setUser={props.setUser} />\r\n      </VerticallyCenteredModal>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Login } from './login';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport { Button, NavDropdown } from 'react-bootstrap';\r\n\r\nexport const MenuView = ({ user, setUser }) => {\r\n  const logOut = () => {\r\n    setUser(null);\r\n    sessionStorage.removeItem('user');\r\n  };\r\n\r\n  return (\r\n    <Nav className='justify-content-between container mt-2 mb-2'>\r\n      <Nav.Item className='d-flex align-items-center'>\r\n        <Nav.Item>\r\n          <Link to='/'>Home</Link>\r\n        </Nav.Item>\r\n        <NavDropdown title='Карти зображень'>\r\n          <NavDropdown.Item>Вода</NavDropdown.Item>\r\n          <NavDropdown.Item>Атмосфера</NavDropdown.Item>\r\n          <NavDropdown.Item>\r\n            <Link to='/earth'>Земля</Link>\r\n          </NavDropdown.Item>\r\n        </NavDropdown>\r\n      </Nav.Item>\r\n      <Nav.Item>\r\n        {user ? (\r\n          <div className='d-flex'>\r\n            <h3 className='mr-2'>Welcome, {user.user_name} ({user.expert_name})</h3>\r\n            <Button variant='outline-secondary' size='sm' onClick={() => logOut()}>\r\n              Log Out\r\n            </Button>\r\n          </div>\r\n\r\n        ) : (\r\n            <Login setUser={setUser} />\r\n          )}\r\n      </Nav.Item>\r\n    </Nav>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Carousel } from 'react-bootstrap';\r\n\r\nimport img1 from '../images/1.jpg';\r\nimport img2 from '../images/2.jpg';\r\nimport img3 from '../images/3.jpg';\r\n\r\nexport const CarouselView = () => {\r\n  return (\r\n    <Carousel className='carousel'>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img1} alt='First slide' />\r\n        <Carousel.Caption>\r\n          <h3>Управління водними ресурсами</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img2} alt='Second slide' />\r\n\r\n        <Carousel.Caption>\r\n          <h3>Комплексний еколого-економічний моніторинг</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img3} alt='Third slide' />\r\n\r\n        <Carousel.Caption>\r\n          <h3>Управління відходами</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img3} alt='Fourth slide' />\r\n\r\n        <Carousel.Caption>\r\n          <h3>Охорона земель</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img3} alt='Fifth slide' />\r\n\r\n        <Carousel.Caption>\r\n          <h3>Атмосферне повітря</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img3} alt='Sixth slide' />\r\n\r\n        <Carousel.Caption>\r\n          <h3>Здоров'я населення</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n    </Carousel>\r\n  );\r\n};\r\n","import { Card } from 'react-bootstrap';\r\nimport author from '../images/author.png';\r\nimport React from 'react';\r\n\r\nexport const AuthorCard = () => {\r\n  return (\r\n    <Card>\r\n      <Card.Img variant='top' src={author} />\r\n      <Card.Body>\r\n        <Card.Title>David Guetta</Card.Title>\r\n        <Card.Text>\r\n          Pierre David Guetta is a French DJ, music programmer, record producer\r\n          and songwriter.\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n","import { ListGroup } from 'react-bootstrap';\r\nimport React from 'react';\r\n\r\nexport const KEEMPrinciples = () => {\r\n  return (\r\n    <ListGroup>\r\n      <h4>\r\n        Комплексний еколого-економічний моніторинг (КЕЕМ) базується на таких\r\n        основних принципах:\r\n      </h4>\r\n      <ListGroup.Item>\r\n        Збір різнорідної екологічної інформації з різних точок регіону.\r\n      </ListGroup.Item>\r\n      <ListGroup.Item>\r\n        Оброблення великих масивів даних різними експертами.\r\n      </ListGroup.Item>\r\n      <ListGroup.Item>\r\n        Одночасна робота різних експертів з екологічною інформацією та\r\n        інформацією від інших експертів.\r\n      </ListGroup.Item>\r\n      <ListGroup.Item>\r\n        Відображення екологічної інформації на карті місцевості для наочності.\r\n      </ListGroup.Item>\r\n      <ListGroup.Item>\r\n        Дослідження екологічної інформації за допомогою різних видів\r\n        математичного аналізу.\r\n      </ListGroup.Item>\r\n      <ListGroup.Item>\r\n        Оцінка ситуації у визначеному регіоні з точки зору закону та визначення\r\n        законності набору заходів по покращенню екологічного стану регіону або\r\n        ліквідації наслідків надзвичайних ситуацій.\r\n      </ListGroup.Item>\r\n    </ListGroup>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { CarouselView } from './carousel';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport { AuthorCard } from './authorCard';\r\nimport { KEEMPrinciples } from './KEEMPrinciples';\r\n\r\nexport const Home = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <CarouselView />\r\n      <Container>\r\n        <Row className='justify-content-center mt-5 mb-5'>\r\n          <Col xs={4}>\r\n            <AuthorCard />\r\n          </Col>\r\n          <Col xs={8}>\r\n            <KEEMPrinciples />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","export const transformEmissions = emissions => {\r\n  const elementIds = [...new Set(emissions.map(({ idElement }) => idElement))];\r\n\r\n  // {\r\n  //     [element]: { [Year]: { [Month]: { avg: ValueAvg, max: ValueMax } } }\r\n  // }\r\n  let transformedData = {};\r\n\r\n  emissions.forEach(({ idElement, ValueAvg, ValueMax, Year, Month }) => {\r\n    elementIds.forEach(elementId => {\r\n      if (elementId === idElement) {\r\n        if (transformedData[elementId]) {\r\n          if (transformedData[idElement][Year]) {\r\n            if (transformedData[idElement][Year][Month]) {\r\n              const { avg, max } = transformedData[idElement][Year][Month];\r\n\r\n              transformedData[idElement][Year][Month] = {\r\n                avg: ValueAvg + avg,\r\n                max: ValueMax + max\r\n              };\r\n            } else {\r\n              transformedData[idElement][Year][Month] = {\r\n                avg: ValueAvg,\r\n                max: ValueMax\r\n              };\r\n            }\r\n          } else {\r\n            transformedData[idElement][Year] = {\r\n              [Month]: { avg: ValueAvg, max: ValueMax }\r\n            };\r\n          }\r\n        } else {\r\n          transformedData[idElement] = {\r\n            [Year]: { [Month]: { avg: ValueAvg, max: ValueMax } }\r\n          };\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  return transformedData;\r\n};\r\n\r\nexport const formatMonthDataForBarChart = (\r\n  transformedEmissions,\r\n  elementId,\r\n  year\r\n) =>\r\n  transformedEmissions &&\r\n  elementId &&\r\n  year &&\r\n  Object.keys(transformedEmissions[elementId][year]).map(month => ({\r\n    month,\r\n    average: transformedEmissions[elementId][year][month].avg,\r\n    max: transformedEmissions[elementId][year][month].max\r\n  }));\r\n\r\nexport const getElementName = (emissions, emissionId) => [\r\n  ...new Set(\r\n    emissions\r\n      .filter(({ idElement }) => Number(emissionId) === idElement)\r\n      .map(({ short_name }) => short_name)\r\n  )\r\n];\r\n\r\nexport const removeObjectDuplicates = (items, prop) =>\r\n  items.filter(\r\n    (obj, index, arr) =>\r\n      arr.map((mapObj) => mapObj[prop]).indexOf(obj[prop]) === index\r\n  );\r\n","import React from 'react';\r\nimport {\r\n    PieChart, Pie, Cell,\r\n} from 'recharts';\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\r\nconst valuePrecision = 4;\r\n\r\nexport const Chart = ({ data }) => {\r\n  const dataForView = data.map(item => ({...item, value: +item.value.toFixed(valuePrecision)}));\r\n  return (\r\n    <PieChart width={400} height={400}>\r\n      <Pie\r\n        data={dataForView}\r\n        cx={200}\r\n        cy={200}\r\n        label\r\n        labelLine={false}\r\n        outerRadius={80}\r\n        fill=\"#8884d8\"\r\n        dataKey=\"value\"\r\n        isAnimationActive={false}\r\n      >\r\n        {\r\n          data.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]}/>)\r\n        }\r\n      </Pie>\r\n    </PieChart>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\n\r\nimport { transformEmissions, formatMonthDataForBarChart, getElementName } from '../utils/helpers';\r\n\r\nconst initialState = {\r\n    select: {\r\n        elementId: \"\",\r\n        year: \"\",\r\n    }\r\n};\r\n\r\nexport const EmissionsBarChart = ({ emissions }) => {\r\n    const [elementId, setElementId] = React.useState(initialState.select.elementId);\r\n    const [year, setYear] = React.useState(initialState.select.year);\r\n\r\n    if (!emissions) {\r\n        return null;\r\n    }\r\n\r\n    const [elementName] = getElementName(emissions, elementId);\r\n    const transformedEmissions = transformEmissions(emissions);\r\n    const formattedMonthData = formatMonthDataForBarChart(transformedEmissions, elementId, year);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"d-flex mb-3\">\r\n                <Dropdown className=\"mr-2\">\r\n                    <Dropdown.Toggle size='md'>\r\n                        {elementName || 'Оберіть елемент'}\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu>\r\n                        {transformedEmissions && Object.keys(transformedEmissions).map(emissionId => {\r\n                            const [elementName] = getElementName(emissions, emissionId)\r\n\r\n                            return <Dropdown.Item\r\n                                key={emissionId}\r\n                                active={elementId === emissionId}\r\n                                onClick={() => {\r\n                                    setElementId(emissionId)\r\n                                    setYear(initialState.select.year)\r\n                                }}\r\n                            >\r\n                                {elementName}\r\n                            </Dropdown.Item>\r\n                        })}\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                {elementId && <Dropdown>\r\n                    <Dropdown.Toggle size='md'>\r\n                        {year || 'Оберіть рік'}\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu>\r\n                        {transformedEmissions && Object.keys(transformedEmissions[elementId]).map(transformedYear => (\r\n                            <Dropdown.Item\r\n                                key={transformedYear}\r\n                                active={year === transformedYear}\r\n                                onClick={() => setYear(transformedYear)}\r\n                            >\r\n                                {transformedYear}\r\n                            </Dropdown.Item>\r\n                        ))}\r\n                    </Dropdown.Menu>\r\n                </Dropdown>}\r\n            </div>\r\n            <div className=\"mb-3\">\r\n                {\r\n                    elementId && year && <BarChart\r\n                        width={500}\r\n                        height={300}\r\n                        data={formattedMonthData}\r\n                        margin={{\r\n                            top: 5, right: 30, left: 20, bottom: 5,\r\n                        }}\r\n                    >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"month\" />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Bar dataKey=\"average\" fill=\"#8884d8\" />\r\n                        <Bar dataKey=\"max\" fill=\"#82ca9d\" />\r\n                    </BarChart>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { DateRangePicker } from 'react-date-range';\r\nimport { addDays } from 'date-fns';\r\nimport { uk } from 'date-fns/locale';\r\n\r\nimport { EMISSIONS_CALCULATIONS_URL } from '../utils/constants';\r\nimport { get } from '../utils/httpService';\r\n\r\nexport const DateRangePickerView = ({ id, param, setEmissionCalculations }) => {\r\n    const [state, setState] = React.useState([\r\n        {\r\n            startDate: new Date(),\r\n            endDate: addDays(new Date(), 7),\r\n            key: 'selection'\r\n        }\r\n    ]);\r\n\r\n    React.useEffect(() => {\r\n        const [date] = state;\r\n        get(`${EMISSIONS_CALCULATIONS_URL}?${param}=${id}&startDate=${date.startDate.toISOString()}&endDate=${date.endDate.toISOString()}`)\r\n            .then(({ data }) => setEmissionCalculations(data))\r\n    }, [id, state]);\r\n\r\n    return <DateRangePicker\r\n        locale={uk}\r\n        onChange={item => setState([item.selection])}\r\n        showSelectionPreview={true}\r\n        moveRangeOnFirstSelection={false}\r\n        months={2}\r\n        ranges={state}\r\n        direction=\"horizontal\"\r\n    />\r\n}\r\n","import React from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nimport { get } from \"../utils/httpService\";\r\nimport { EMISSIONS_CALCULATIONS_URL } from \"../utils/constants\";\r\n\r\nimport { VerticallyCenteredModal } from \"./modal\";\r\nimport { Chart } from \"./chart\";\r\nimport { EmissionsBarChart } from \"./emissionsBarChart\";\r\nimport { DateRangePickerView } from \"./dateRangePicker\";\r\n\r\nimport \"./emissionsChartModal.css\";\r\n\r\nconst valuesPrecision = 2;\r\nconst emptyState = \"Немає даних\";\r\n\r\nexport const EmissionsChartModal = ({\r\n  id,\r\n  isPoint,\r\n  onHide,\r\n  show,\r\n  emissions,\r\n}) => {\r\n  const param = isPoint ? \"idPoi\" : \"idPolygon\";\r\n  const [emissionCalculations, setEmissionCalculations] = React.useState([]);\r\n\r\n  React.useEffect(() => {\r\n    getEmissionCalculations(id);\r\n  }, [id]);\r\n\r\n  const getEmissionCalculations = (id) => {\r\n    get(`${EMISSIONS_CALCULATIONS_URL}?${param}=${id}`).then(({ data }) =>\r\n      setEmissionCalculations(data)\r\n    );\r\n  };\r\n\r\n  const chartAverageData =\r\n    emissionCalculations && emissionCalculations.length > 0\r\n      ? emissionCalculations.map((emission) => ({\r\n          name: emission.element,\r\n          value: emission.averageCalculations.average,\r\n        }))\r\n      : [];\r\n\r\n  const chartMaxData =\r\n    emissionCalculations && emissionCalculations.length > 0\r\n      ? emissionCalculations.map((emission) => ({\r\n          name: emission.element,\r\n          value: emission.maximumCalculations.max,\r\n        }))\r\n      : [];\r\n\r\n  return (\r\n    <VerticallyCenteredModal size=\"xl\" show={show} onHide={onHide} header=\"Відобразити викиди\">\r\n      <h3 className=\"mb-3\">\r\n        Оберіть дати для відображення викидів за певний період\r\n      </h3>\r\n      <DateRangePickerView\r\n        id={id}\r\n        param={param}\r\n        setEmissionCalculations={setEmissionCalculations}\r\n      />\r\n      {emissionCalculations.length > 0 ? (\r\n        <Table className=\"emissions-table\">\r\n          <thead>\r\n            <tr>\r\n              <th title=\"Елемент\">Елемент</th>\r\n              <th title=\"Середовище\">Середовище</th>\r\n              <th title=\"Одиниця виміру\">Одиниця виміру</th>\r\n              <th title=\"Середнє значення average викидів\">\r\n                Середнє значення average викидів\r\n              </th>\r\n              <th title=\"ГДК average\">ГДК average</th>\r\n              <th title=\"Перевищення ГДК average\">Перевищення ГДК average</th>\r\n              <th title=\"Max викидів\">Max викидів</th>\r\n              <th title=\"ГДК max\">ГДК max</th>\r\n              <th title=\"Перевищення ГДК max\">Перевищення ГДК max</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {emissionCalculations.map((emission, id) => {\r\n              const exceedingByAverage = emission.averageCalculations.gdkAverage\r\n                ? (\r\n                    emission.averageCalculations.gdkAverage -\r\n                    emission.averageCalculations.average\r\n                  ).toFixed(valuesPrecision)\r\n                : emptyState;\r\n\r\n              const exceedingByMaximum = emission.maximumCalculations.gdkMax\r\n                ? (\r\n                    emission.maximumCalculations.gdkMax -\r\n                    emission.maximumCalculations.max\r\n                  ).toFixed(valuesPrecision)\r\n                : emptyState;\r\n\r\n              return (\r\n                <tr key={id}>\r\n                  <td title={emission.element}>{emission.element}</td>\r\n                  <td title={emission.element}>{emission.idEnvironment}</td>\r\n                  <td title={emission.measure}>{emission.measure}</td>\r\n                  <td title={emission.averageCalculations.average}>\r\n                    {emission.averageCalculations.average.toFixed(\r\n                      valuesPrecision\r\n                    )}\r\n                  </td>\r\n                  <td\r\n                    title={\r\n                      emission.averageCalculations.gdkAverage || emptyState\r\n                    }\r\n                  >\r\n                    {emission.averageCalculations.gdkAverage || emptyState}\r\n                  </td>\r\n                  <td title={exceedingByAverage}>{exceedingByAverage}</td>\r\n                  <td title={emission.maximumCalculations.max}>\r\n                    {emission.maximumCalculations.max.toFixed(valuesPrecision)}\r\n                  </td>\r\n                  <td title={emission.maximumCalculations.gdkMax || emptyState}>\r\n                    {emission.maximumCalculations.gdkMax || emptyState}\r\n                  </td>\r\n                  <td title={exceedingByMaximum}>{exceedingByMaximum}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n      ) : (\r\n        <h5 className=\"mb-3\">Немає інформації про викиди за обраний період</h5>\r\n      )}\r\n      <EmissionsBarChart emissions={emissions} />\r\n      <h3>Сума average викидів</h3>\r\n      <Chart data={chartAverageData} />\r\n      <h3>Сума max викидів</h3>\r\n      <Chart data={chartMaxData} />\r\n    </VerticallyCenteredModal>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Popup, Polygon } from \"react-leaflet\";\r\nimport { Button, Table } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { EmissionsChartModal } from \"./emissionsChartModal\";\r\n\r\nimport \"./popup.css\";\r\n\r\nconst initialState = {\r\n  showEmissionsChartModal: false,\r\n  emissionCalculations: [],\r\n};\r\n\r\nexport const Polygons = ({\r\n  polygons,\r\n  setPolygonId,\r\n  setIsEditPolygonMode,\r\n  setShowPolygonModal,\r\n}) => {\r\n  const handleClick = (polygonId) => {\r\n    setPolygonId(polygonId);\r\n    setIsEditPolygonMode(true);\r\n    setShowPolygonModal(true);\r\n  };\r\n\r\n  const [showEmissionsChartModal, setShowEmissionsChartModal] = React.useState(\r\n    initialState.showEmissionsChartModal\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {polygons.map(\r\n        ({\r\n          poligonId,\r\n          polygonPoints,\r\n          brushColorR,\r\n          brushColorG,\r\n          brushColorB,\r\n          user_name,\r\n          name,\r\n          emissions,\r\n        }) => (\r\n          <Polygon\r\n            key={poligonId}\r\n            positions={polygonPoints}\r\n            color={`rgba(${brushColorR}, ${brushColorG}, ${brushColorB}, 1)`}\r\n          >\r\n            <Popup maxWidth=\"auto\">\r\n              <FontAwesomeIcon\r\n                icon={faPencilAlt}\r\n                onClick={() => handleClick(poligonId)}\r\n                className=\"edit-pencil-icon\"\r\n              />\r\n              <div className=\"mt-4 mb-2\">\r\n                {name && (\r\n                  <div>\r\n                    <strong>Назва:</strong> {name}\r\n                  </div>\r\n                )}\r\n                {user_name && (\r\n                  <div>\r\n                    <strong>Керівник який поставив:</strong> {user_name}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {emissions && emissions.length > 0 && (\r\n                <>\r\n                  <Table\r\n                    striped\r\n                    bordered\r\n                    hover\r\n                    size=\"sm\"\r\n                    className=\"emissions-table\"\r\n                  >\r\n                    <thead>\r\n                      <tr>\r\n                        <th title=\"Хімічний елемент\">Хімічний елемент</th>\r\n                        <th title=\"Середовище\">Середовище</th>\r\n                        <th title=\"Середнє значення\">Середнє значення</th>\r\n                        <th title=\"Максимальне значення\">\r\n                          Максимальне значення\r\n                        </th>\r\n                        <th title=\"Рік\">Рік</th>\r\n                        <th title=\"Місяць\">Місяць</th>\r\n                        <th title=\"День\">День</th>\r\n                        <th title=\"Одиниця виміру\">Одиниця виміру</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {emissions.map(\r\n                        (\r\n                          {\r\n                            short_name,\r\n                            name: environmentName,\r\n                            ValueAvg,\r\n                            ValueMax,\r\n                            Year,\r\n                            Month,\r\n                            day,\r\n                            Measure,\r\n                          },\r\n                          key\r\n                        ) => (\r\n                          <tr key={key}>\r\n                            <td title={short_name}>{short_name}</td>\r\n                            <td title={environmentName}>{environmentName}</td>\r\n                            <td title={ValueAvg}>{ValueAvg}</td>\r\n                            <td title={ValueMax}>{ValueMax}</td>\r\n                            <td title={Year}>{Year}</td>\r\n                            <td title={Month}>{Month}</td>\r\n                            <td title={day}>{day}</td>\r\n                            <td title={Measure}>{Measure}</td>\r\n                          </tr>\r\n                        )\r\n                      )}\r\n                    </tbody>\r\n                  </Table>\r\n                  <Button\r\n                    size=\"sm\"\r\n                    onClick={() => setShowEmissionsChartModal(true)}\r\n                  >\r\n                    Відобразити графіки викидів\r\n                  </Button>\r\n                </>\r\n              )}\r\n              <EmissionsChartModal\r\n                id={poligonId}\r\n                emissions={emissions}\r\n                show={showEmissionsChartModal}\r\n                onHide={() => setShowEmissionsChartModal(false)}\r\n              />\r\n            </Popup>\r\n          </Polygon>\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Popup, Marker } from \"react-leaflet\";\r\nimport { Icon } from \"leaflet/dist/leaflet-src.esm\";\r\nimport { Button, Table } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { EmissionsChartModal } from \"./emissionsChartModal\";\r\n\r\nimport \"./popup.css\";\r\n\r\nexport const Points = ({\r\n  points,\r\n  setShowPointModal,\r\n  setPointId,\r\n  setIsEditPointMode,\r\n}) => {\r\n  const handleClick = (id) => {\r\n    setPointId(id);\r\n    setIsEditPointMode(true);\r\n    setShowPointModal(true);\r\n  };\r\n\r\n  const [showEmissionsChartModal, setShowEmissionsChartModal] = React.useState(\r\n    false\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {points.map(\r\n        ({\r\n          Id: id,\r\n          coordinates,\r\n          name,\r\n          Description: description,\r\n          Image: image,\r\n          emissions,\r\n          owner_type\r\n        }) => (\r\n          <Marker\r\n            key={id}\r\n            position={coordinates}\r\n            icon={\r\n              new Icon({\r\n                iconUrl: image,\r\n                iconSize: [20, 30],\r\n              })\r\n            }\r\n          >\r\n            <Popup maxWidth=\"auto\">\r\n              <FontAwesomeIcon\r\n                icon={faPencilAlt}\r\n                onClick={() => handleClick(id)}\r\n                className=\"edit-pencil-icon\"\r\n              />\r\n              <div className=\"mt-4 mb-2\">\r\n                {name && (\r\n                  <div>\r\n                    <strong>Назва:</strong> {name}\r\n                  </div>\r\n                )}\r\n                {description && (\r\n                  <div>\r\n                    <strong>Опис:</strong> {description}\r\n                  </div>\r\n                )}\r\n                {owner_type && (\r\n                  <div>\r\n                    <strong>Форма власності:</strong> {owner_type.name}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {emissions.length > 0 && (\r\n                <>\r\n                  <Table\r\n                    striped\r\n                    bordered\r\n                    hover\r\n                    size=\"sm\"\r\n                    className=\"emissions-table\"\r\n                  >\r\n                    <thead>\r\n                      <tr>\r\n                        <th title=\"Хімічний елемент\">Хімічний елемент</th>\r\n                        <th title=\"Середовище\">Середовище</th>\r\n                        <th title=\"Середнє значення\">Середнє значення</th>\r\n                        <th title=\"Максимальне значення\">\r\n                          Максимальне значення\r\n                        </th>\r\n                        <th title=\"Рік\">Рік</th>\r\n                        <th title=\"Місяць\">Місяць</th>\r\n                        <th title=\"День\">День</th>\r\n                        <th title=\"Одиниця виміру\">Одиниця виміру</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {emissions.map(\r\n                        (\r\n                          {\r\n                            short_name,\r\n                            name: environmentName,\r\n                            ValueAvg,\r\n                            ValueMax,\r\n                            Year,\r\n                            Month,\r\n                            day,\r\n                            Measure,\r\n                          },\r\n                          key\r\n                        ) => (\r\n                          <tr key={key}>\r\n                            <td title={short_name}>{short_name}</td>\r\n                            <td title={environmentName}>{environmentName}</td>\r\n                            <td title={ValueAvg}>{ValueAvg}</td>\r\n                            <td title={ValueMax}>{ValueMax}</td>\r\n                            <td title={Year}>{Year}</td>\r\n                            <td title={Month}>{Month}</td>\r\n                            <td title={day}>{day}</td>\r\n                            <td title={Measure}>{Measure}</td>\r\n                          </tr>\r\n                        )\r\n                      )}\r\n                    </tbody>\r\n                  </Table>\r\n                  <Button\r\n                    size=\"sm\"\r\n                    onClick={() => setShowEmissionsChartModal(true)}\r\n                  >\r\n                    Відобразити графіки викидів\r\n                  </Button>\r\n                </>\r\n              )}\r\n              <EmissionsChartModal\r\n                isPoint\r\n                id={id}\r\n                emissions={emissions}\r\n                show={showEmissionsChartModal}\r\n                onHide={() => setShowEmissionsChartModal(false)}\r\n              />\r\n            </Popup>\r\n          </Marker>\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Dropdown, Form, Alert } from \"react-bootstrap\";\r\n\r\nimport { ELEMENTS_URL, ENVIRONMENTS_URL, GDK_URL } from \"../utils/constants\";\r\nimport { post, get } from \"../utils/httpService\";\r\n\r\nconst now = new Date();\r\nconst year = now.getFullYear();\r\nconst month = ('0' + (now.getMonth() + 1)).slice(-2);\r\nconst day = ('0' + now.getDate()).slice(-2);\r\n\r\nconst initialState = {\r\n    form: {\r\n        environment: {\r\n            id: 4,\r\n            name: 'Please select environment'\r\n        },\r\n        date: now,\r\n        valueAvg: 0,\r\n        valueMax: 0,\r\n        gdk: 100000,\r\n        element: {\r\n            code: 0,\r\n            short_name: 'Please select element'\r\n        },\r\n        measure: '',\r\n    }\r\n};\r\n\r\nexport const SubmitForm = ({ onSave }) => {\r\n    const [isActive, setIsActive] = useState(false);\r\n    const buttonText = isActive ? 'Less' : 'More';\r\n\r\n    const [environments, setEnvironments] = useState([]);\r\n    const [selectedEnvironment, setEnvironment] = useState(initialState.form.environment);\r\n    const [date, setDate] = useState(initialState.form.date);\r\n    const [valueAvg, setAvgValue] = useState(initialState.form.valueAvg);\r\n    const [gdkAvg, setGdkAvg] = useState(initialState.form.gdk);\r\n    const [valueMax, setMaxValue] = useState(initialState.form.valueMax);\r\n    const [gdkMax, setGdkMax] = useState(initialState.form.gdk);\r\n    const [elements, setElements] = useState([]);\r\n    const [selectedElement, setElement] = useState(initialState.form.element);\r\n    const [measure, setMeasure] = useState(initialState.form.measure);\r\n\r\n    const clearForm = () => {\r\n        setEnvironment(initialState.form.environment);\r\n        setDate(initialState.form.date);\r\n        setAvgValue(initialState.form.valueAvg);\r\n        setGdkAvg(initialState.form.gdk);\r\n        setMaxValue(initialState.form.valueMax);\r\n        setGdkMax(initialState.form.gdk);\r\n        setElement(initialState.form.element);\r\n        setMeasure(initialState.form.measure);\r\n    }\r\n\r\n    const onClick = () => {\r\n        clearForm();\r\n        setIsActive(!isActive);\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        let emission;\r\n\r\n        if (isActive && date) {\r\n            const [year, month, day] = date.split('-');\r\n\r\n            emission = isActive && {\r\n                valueAvg,\r\n                valueMax,\r\n                year,\r\n                month,\r\n                day,\r\n                idElement: selectedElement.code,\r\n                idEnvironment: selectedEnvironment.id,\r\n                measure,\r\n            };\r\n\r\n        }\r\n\r\n        onSave(emission);\r\n        clearForm();\r\n    }\r\n\r\n    const selectElement = element => {\r\n        setElement(element);\r\n        setMeasure(element.measure);\r\n\r\n        post(GDK_URL, { code: element.code, environment: selectedEnvironment.id })\r\n            .then(({ data }) => {\r\n                if (data.average && data.max) {\r\n                    setGdkAvg(data.average);\r\n                    setGdkMax(data.max);\r\n                } else {\r\n                    setGdkAvg(initialState.form.valueAvg);\r\n                    setGdkMax(initialState.form.valueMax);\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleDate = e => {\r\n        if (new Date(e.target.value) > now) {\r\n            setDate(`${year}-${month}-${day}`);\r\n        } else {\r\n            setDate(e.target.value);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        get(ENVIRONMENTS_URL).then(({ data }) => setEnvironments(data));\r\n        get(ELEMENTS_URL).then(({ data }) => setElements(data));\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"d-flex justify-content-center\">\r\n                <Button onClick={onClick}>{buttonText}</Button>\r\n            </div>\r\n            {isActive && (\r\n                <>\r\n                    <Form.Group>\r\n                        <Dropdown>\r\n                            <Dropdown.Toggle size='sm' variant='success'>\r\n                                {selectedEnvironment.name}\r\n                            </Dropdown.Toggle>\r\n                            <Dropdown.Menu>\r\n                                {environments.length && environments.map(environment => (\r\n                                    <Dropdown.Item\r\n                                        disabled={environment.id !== 4} // TODO: remove this shitey ASAP\r\n                                        key={environment.id}\r\n                                        onClick={() => setEnvironment(environment)}\r\n                                    >\r\n                                        {environment.name}\r\n                                    </Dropdown.Item>\r\n                                ))}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label>Enter date</Form.Label>\r\n                        <Form.Control\r\n                            type='date'\r\n                            value={date}\r\n                            onChange={handleDate}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label>Enter average value</Form.Label>\r\n                        <Form.Control\r\n                            type='number'\r\n                            min='0'\r\n                            value={valueAvg}\r\n                            onChange={e => setAvgValue(+e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n                    {gdkAvg > 0 && gdkAvg < valueAvg && <Alert variant=\"danger\">Average value is too high ({gdkAvg})</Alert>}\r\n\r\n                    <Form.Group>\r\n                        <Form.Label>Enter max value</Form.Label>\r\n                        <Form.Control\r\n                            type='number'\r\n                            min='0'\r\n                            value={valueMax}\r\n                            onChange={e => setMaxValue(+e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n                    {gdkMax > 0 && gdkMax < valueMax && <Alert variant=\"danger\">Max value is too high ({gdkMax})</Alert>}\r\n\r\n                    <Form.Group>\r\n                        <Dropdown>\r\n                            <Dropdown.Toggle size='sm' variant='success'>\r\n                                {selectedElement.short_name}\r\n                            </Dropdown.Toggle>\r\n                            <Dropdown.Menu\r\n                                style={{\r\n                                    height: '500px',\r\n                                    overflowY: 'scroll',\r\n                                }}>\r\n                                {elements.length && elements.map(element => (\r\n                                    <Dropdown.Item\r\n                                        key={element.code}\r\n                                        onClick={() => selectElement(element)}\r\n                                    >\r\n                                        {element.short_name}\r\n                                    </Dropdown.Item>\r\n                                ))}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </Form.Group>\r\n\r\n                    {measure && (\r\n                        <Form.Group>\r\n                            <Form.Label>Measure</Form.Label>\r\n                            <Form.Control\r\n                                type='input'\r\n                                disabled\r\n                                value={measure}\r\n                            />\r\n                        </Form.Group>\r\n                    )}\r\n                </>\r\n            )}\r\n            <Button variant='outline-primary' onClick={handleSubmit}>Save</Button>\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Dropdown, Form } from \"react-bootstrap\";\r\n\r\nimport { TYPE_OF_OBJECT_URL, OWNER_TYPES_URL } from \"../utils/constants\";\r\nimport { post, get, put } from \"../utils/httpService\";\r\nimport { POINT_URL } from \"../utils/constants\";\r\n\r\nimport { VerticallyCenteredModal } from \"./modal\";\r\nimport { SubmitForm } from './submitForm';\r\n\r\nconst initialState = {\r\n  form: {\r\n    name: \"\",\r\n    description: \"\",\r\n    type: {\r\n      id: 0,\r\n      name: ''\r\n    },\r\n    ownerType: {\r\n      id: 0,\r\n      type: ''\r\n    }\r\n  }\r\n};\r\n\r\nconst emptyState = {\r\n  typeOfObject: `Оберіть тип об'єкту`,\r\n  ownerType: `Оберіть форму власності`\r\n};\r\n\r\nexport const AddPointModal = ({\r\n  onHide,\r\n  show,\r\n  coordinates,\r\n  setShouldFetchData,\r\n  isEditPointMode,\r\n  setIsEditPointMode,\r\n  pointId,\r\n  setPointId,\r\n  user,\r\n}) => {\r\n  const [name, setName] = useState(initialState.form.name);\r\n  const [description, setDescription] = useState(initialState.form.description);\r\n  const [type, setType] = useState(initialState.form.type);\r\n  const [ownerType, setOwnerType] = useState(initialState.form.ownerType);\r\n  const [types, setTypes] = useState([]);\r\n  const [ownerTypes, setOwnerTypes] = useState([]);\r\n\r\n  const clearForm = () => {\r\n    setName(initialState.form.name);\r\n    setDescription(initialState.form.description);\r\n    setType(initialState.form.type);\r\n    setOwnerType(initialState.form.ownerType);\r\n  };\r\n\r\n  const addPoint = emission => {\r\n    post(POINT_URL, {\r\n      name,\r\n      description,\r\n      type: type.id,\r\n      coordinates,\r\n      emission,\r\n      id_of_user: user.id_of_user,\r\n      owner_type_id: ownerType.id,\r\n    }).then(() => {\r\n      clearForm();\r\n      onHide();\r\n      setShouldFetchData(true);\r\n    }).catch(() => setShouldFetchData(false))\r\n  };\r\n\r\n  const editPoint = emission => {\r\n    put(`${POINT_URL}/${pointId}`, {\r\n      name,\r\n      description,\r\n      type: type.id,\r\n      owner_type_id: ownerType.id,\r\n      emission\r\n    }).then(() => {\r\n      clearForm();\r\n      onHide();\r\n      setShouldFetchData(true);\r\n      setIsEditPointMode(false);\r\n      setPointId(null);\r\n    }).catch(() => {\r\n      setShouldFetchData(false);\r\n      setIsEditPointMode(false);\r\n      setPointId(null);\r\n    })\r\n  };\r\n\r\n  const hide = () => {\r\n    if (!isEditPointMode) {\r\n      clearForm();\r\n    }\r\n    onHide();\r\n  };\r\n\r\n  useEffect(() => {\r\n    get(TYPE_OF_OBJECT_URL).then(({ data }) => {\r\n      setTypes(data);\r\n    });\r\n    get(OWNER_TYPES_URL).then(({ data }) => {\r\n      setOwnerTypes(data);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isEditPointMode && pointId) {\r\n      get(`${POINT_URL}/${pointId}`).then(({ data }) => {\r\n        const type = types.find(({ id }) => id === data.type);\r\n        const ownerType = ownerTypes.find(({ id }) => id === data.owner_type.id);\r\n        if (type) {\r\n          setType(type);\r\n        }\r\n        if (ownerType) {\r\n          setOwnerType(ownerType);\r\n        }\r\n        setName(data.name);\r\n        setDescription(data.description);\r\n      })\r\n    }\r\n  }, [pointId, isEditPointMode]);\r\n\r\n  return (\r\n    <VerticallyCenteredModal size='lg' show={show} onHide={() => hide()} header=\"Додати або редагувати точку\">\r\n      <Form>\r\n        <Form.Group>\r\n          <Dropdown>\r\n            <Dropdown.Toggle size='sm' variant='success'>\r\n              {type.name || emptyState.typeOfObject}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n              {types.length && types.map(typeOfObject => (\r\n                <Dropdown.Item\r\n                  key={typeOfObject.id}\r\n                  active={typeOfObject === type}\r\n                  onClick={() => setType(typeOfObject)}\r\n                >\r\n                  {typeOfObject.name}\r\n                </Dropdown.Item>\r\n              ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Dropdown>\r\n            <Dropdown.Toggle size='sm' variant='success'>\r\n              {ownerType.type || emptyState.ownerType}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n              {ownerTypes.length && ownerTypes.map(type => (\r\n                <Dropdown.Item\r\n                  key={type.id}\r\n                  active={type === ownerType}\r\n                  onClick={() => setOwnerType(type)}\r\n                >\r\n                  {type.type}\r\n                </Dropdown.Item>\r\n              ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Enter name</Form.Label>\r\n          <Form.Control\r\n            type='input'\r\n            value={name}\r\n            onChange={e => setName(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Enter description</Form.Label>\r\n          <Form.Control\r\n            as='textarea'\r\n            rows='3'\r\n            value={description}\r\n            onChange={e => setDescription(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n\r\n        {isEditPointMode\r\n          ? <SubmitForm onSave={editPoint} />\r\n          : <SubmitForm onSave={addPoint} />\r\n        }\r\n      </Form>\r\n    </VerticallyCenteredModal>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nimport { post, get, put } from \"../utils/httpService\";\r\nimport { POLYGON_URL } from \"../utils/constants\";\r\n\r\nimport { VerticallyCenteredModal } from \"./modal\";\r\nimport { SubmitForm } from './submitForm';\r\nimport { useEffect } from 'react';\r\n\r\nconst initialState = {\r\n  form: {\r\n    brushColor: {\r\n      r: 0,\r\n      g: 0,\r\n      b: 0,\r\n      a: 1\r\n    },\r\n    lineThickness: 1,\r\n    name: \"\",\r\n    type: \"poligon\",\r\n    description: \"\"\r\n  }\r\n};\r\n\r\nexport const AddPolygonModal = ({\r\n  onHide,\r\n  show,\r\n  coordinates,\r\n  setShouldFetchData,\r\n  setNewPolygonCoordinates,\r\n  user,\r\n  isEditPolygonMode,\r\n  setIsEditPolygonMode,\r\n  polygonId,\r\n  setPolygonId,\r\n}) => {\r\n  const [lineThickness, setLineThickness] = useState(\r\n    initialState.form.lineThickness\r\n  );\r\n  const [color, setColor] = useState(initialState.form.brushColor);\r\n  const [name, setName] = useState(initialState.form.name);\r\n  const [description, setDescription] = useState(initialState.form.description);\r\n\r\n  const clearForm = () => {\r\n    setLineThickness(initialState.form.lineThickness);\r\n    setColor(initialState.form.brushColor);\r\n    setName(initialState.form.name);\r\n    setDescription(initialState.form.description);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (polygonId && isEditPolygonMode) {\r\n      get(`${POLYGON_URL}/${polygonId}`).then(({ data }) => {\r\n        setLineThickness(data.line_thickness);\r\n        setColor({\r\n          r: data.brush_color_r,\r\n          g: data.bruch_color_g,\r\n          b: data.brush_color_b,\r\n          a: data.brush_alfa\r\n        });\r\n        setName(data.name);\r\n        setDescription(data.description);\r\n      });\r\n    }\r\n  }, [polygonId, isEditPolygonMode]);\r\n\r\n  const addPolygon = emission => {\r\n    post(POLYGON_URL, {\r\n      brush_color_r: color.r,\r\n      bruch_color_g: color.g,\r\n      brush_color_b: color.b,\r\n      brush_alfa: color.a,\r\n      line_collor_r: color.r,\r\n      line_color_g: color.g,\r\n      line_color_b: color.b,\r\n      line_alfa: color.a,\r\n      line_thickness: Number(lineThickness),\r\n      name,\r\n      id_of_user: Number(user.id_of_user),\r\n      id_of_expert: Number(user.id_of_expert),\r\n      type: initialState.form.type,\r\n      description,\r\n      points: coordinates.map((point, index) => ({\r\n        latitude: point.lat,\r\n        longitude: point.lng,\r\n        order123: index\r\n      })),\r\n      emission\r\n    })\r\n      .then(() => {\r\n        clearForm();\r\n        onHide();\r\n        setNewPolygonCoordinates([]);\r\n        setShouldFetchData(true);\r\n      })\r\n      .catch(() => {\r\n        setNewPolygonCoordinates([]);\r\n        setShouldFetchData(false);\r\n      });\r\n  };\r\n\r\n  const editPolygon = emission => {\r\n    put(`${POLYGON_URL}/${polygonId}`, {\r\n      brush_color_r: color.r,\r\n      bruch_color_g: color.g,\r\n      brush_color_b: color.b,\r\n      brush_alfa: color.a,\r\n      line_collor_r: color.r,\r\n      line_color_g: color.g,\r\n      line_color_b: color.b,\r\n      line_alfa: color.a,\r\n      line_thickness: Number(lineThickness),\r\n      name,\r\n      description,\r\n      emission\r\n    })\r\n      .then(() => {\r\n        clearForm();\r\n        onHide();\r\n        setNewPolygonCoordinates([]);\r\n        setShouldFetchData(true);\r\n        setIsEditPolygonMode(false);\r\n        setPolygonId(null);\r\n      })\r\n      .catch(() => {\r\n        setIsEditPolygonMode(false);\r\n        setPolygonId(null);\r\n        setNewPolygonCoordinates([]);\r\n        setShouldFetchData(false);\r\n      });\r\n  };\r\n\r\n  const hide = () => {\r\n    if (!isEditPolygonMode) {\r\n      clearForm();\r\n    }\r\n    onHide();\r\n  };\r\n\r\n  return (\r\n    <VerticallyCenteredModal size='lg' show={show} onHide={() => hide()} header=\"Додати або редагувати полігон\">\r\n      <Form>\r\n        <Form.Group>\r\n          <Form.Label>\r\n            Choose color of the polygon and line thickness\r\n          </Form.Label>\r\n          <Form.Control\r\n            type='number'\r\n            value={lineThickness}\r\n            onChange={e => setLineThickness(e.target.value)}\r\n          />\r\n          <br />\r\n          <SketchPicker color={color} onChangeComplete={({ rgb }) => setColor(rgb)} />\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Enter name</Form.Label>\r\n          <Form.Control\r\n            type='input'\r\n            value={name}\r\n            onChange={e => setName(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Enter description</Form.Label>\r\n          <Form.Control\r\n            as='textarea'\r\n            rows='3'\r\n            value={description}\r\n            onChange={e => setDescription(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        {\r\n          isEditPolygonMode\r\n            ? <SubmitForm onSave={editPolygon} />\r\n            : <SubmitForm onSave={addPolygon} />\r\n        }\r\n      </Form>\r\n    </VerticallyCenteredModal>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { get } from '../utils/httpService';\r\nimport { EXPERTS_URL } from '../utils/constants';\r\n\r\nimport './filtration.css';\r\n\r\nexport const Filtration = ({ user, setFilteredItems }) => {\r\n  let filtrationForm;\r\n  const [existingExperts, setExistingExperts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    get(EXPERTS_URL).then(({ data }) => {\r\n      setExistingExperts(data);\r\n    });\r\n  }, []);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { expertCheckbox: expertCheckboxes, myCheckbox } = filtrationForm;\r\n    const selectedExperts = Array.from(expertCheckboxes)\r\n      .filter(({ checked }) => checked)\r\n      .map(({ value }) => existingExperts.find(\r\n        ({ id_of_expert }) => +id_of_expert === +value\r\n      ));\r\n\r\n    if (myCheckbox && myCheckbox.checked) {\r\n      setFilteredItems({ isMyObjectsSelectionChecked: true, items: [...selectedExperts, user] });\r\n    }\r\n    else {\r\n      setFilteredItems({ isMyObjectsSelectionChecked: false, items: selectedExperts });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={submitHandler}\r\n      className='filtration-form d-flex justify-content-center flex-column'\r\n      ref={form => filtrationForm = form}\r\n    >\r\n      <Form.Group>\r\n        <Form.Label>Оберіть експерта</Form.Label>\r\n        {existingExperts.length &&\r\n          existingExperts.map((expert) => (\r\n            <Form.Check\r\n              label={expert.expert_name}\r\n              type='checkbox'\r\n              value={expert.id_of_expert}\r\n              key={expert.id_of_expert}\r\n              name='expertCheckbox'\r\n            />\r\n          ))}\r\n        {user && (\r\n          <Form.Check\r\n            label=\"Мої об'єкти\"\r\n            type='checkbox'\r\n            value={user.id_of_user}\r\n            key={user.id_of_user}\r\n            name='myCheckbox'\r\n          />\r\n        )}\r\n      </Form.Group>\r\n\r\n      <Button variant='primary' type='submit' className='text-center'>\r\n        Submit\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Navbar } from 'react-bootstrap';\r\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\r\n\r\nimport { get } from '../utils/httpService';\r\nimport {\r\n  POLYGONS_URL,\r\n  POINTS_URL,\r\n  MAP_CENTER_COORDS,\r\n  OPEN_STREET_MAP_URL,\r\n} from '../utils/constants';\r\nimport { removeObjectDuplicates } from '../utils/helpers';\r\n\r\nimport { Polygons } from './polygons';\r\nimport { Points } from './points';\r\nimport { AddPointModal } from './addPointModal';\r\nimport { AddPolygonModal } from './addPolygonModal';\r\nimport { Filtration } from './filtration';\r\n\r\nimport './map.css';\r\n\r\nconst initialState = {\r\n  points: [],\r\n  polygons: [\r\n    {\r\n      name: '',\r\n      expertName: '',\r\n      polygonPoints: [],\r\n    },\r\n  ],\r\n  filteredPolygons: [],\r\n  filteredItems: {\r\n    isMyObjectsSelectionChecked: false,\r\n    items: [],\r\n  },\r\n  filteredPoints: [],\r\n  isAddPointModeEnabled: false,\r\n  isAddPolygonModeEnabled: false,\r\n  showPointModal: false,\r\n  showPolygonModal: false,\r\n  newPointCoordinates: [],\r\n  newPolygonCoordinates: [],\r\n  shouldFetchData: true,\r\n  isEditPointMode: false,\r\n  pointId: null,\r\n  isEditPolygonMode: false,\r\n  polygonId: null,\r\n};\r\n\r\nconst buttonText = (geographicalObj, isModeEnabled) =>\r\n  isModeEnabled\r\n    ? `Disable add ${geographicalObj} mode`\r\n    : `Add ${geographicalObj} to the map`;\r\n\r\nexport const MapView = ({ user }) => {\r\n  const [filteredItems, setFilteredItems] = useState(\r\n    initialState.filteredItems\r\n  );\r\n  const [shouldFetchData, setShouldFetchData] = useState(\r\n    initialState.shouldFetchData\r\n  );\r\n\r\n  // points\r\n  const [filteredPoints, setFilteredPoints] = useState(\r\n    initialState.filteredPoints\r\n  );\r\n  const [isAddPointModeEnabled, setAddPointMode] = useState(\r\n    initialState.isAddPointModeEnabled\r\n  );\r\n  const [showPointModal, setShowPointModal] = useState(\r\n    initialState.showPointModal\r\n  );\r\n  const [newPointCoordinates, setNewPointCoordinates] = useState(\r\n    initialState.newPointCoordinates\r\n  );\r\n\r\n  // polygons\r\n  const [filteredPolygons, setFilteredPolygons] = useState(\r\n    initialState.filteredPolygons\r\n  );\r\n  const [isAddPolygonModeEnabled, setAddPolygonMode] = useState(\r\n    initialState.isAddPolygonModeEnabled\r\n  );\r\n  const [showPolygonModal, setShowPolygonModal] = useState(\r\n    initialState.showPolygonModal\r\n  );\r\n  const [newPolygonCoordinates, setNewPolygonCoordinates] = useState(\r\n    initialState.newPolygonCoordinates\r\n  );\r\n\r\n  // edit point\r\n  const [isEditPointMode, setIsEditPointMode] = useState(\r\n    initialState.isEditPointMode\r\n  );\r\n  const [pointId, setPointId] = useState(initialState.pointId);\r\n\r\n  //edit polygon\r\n  const [isEditPolygonMode, setIsEditPolygonMode] = useState(\r\n    initialState.isEditPolygonMode\r\n  );\r\n  const [polygonId, setPolygonId] = useState(initialState.polygonId);\r\n\r\n  const [mapCoordinates, setMapCoordinates] = useState({\r\n    northLatitude: null,\r\n    southLatitude: null,\r\n    westLongitude: null,\r\n    eastLongitude: null,\r\n  });\r\n\r\n  const fetchData = () => {\r\n    get(POLYGONS_URL).then(({ data }) => {\r\n      setFilteredPolygons(data);\r\n      initialState.polygons = data;\r\n    });\r\n\r\n    let pointsUrl = `${POINTS_URL}`;\r\n\r\n    const shouldLoadDynamically = Object.values(mapCoordinates).every(\r\n      (coordinate) => !!coordinate\r\n    );\r\n    if (shouldLoadDynamically) {\r\n      pointsUrl += `?eastLongitude=${mapCoordinates.eastLongitude}&westLongitude=${mapCoordinates.westLongitude}&southLatitude=${mapCoordinates.southLatitude}&northLatitude=${mapCoordinates.northLatitude}`;\r\n    }\r\n\r\n    get(`${pointsUrl}`).then(({ data }) => {\r\n      setFilteredPoints(data);\r\n      initialState.points = data;\r\n    });\r\n  };\r\n\r\n  const filterByExpert = ({ id_of_expert: idOfExpert }) =>\r\n    filteredItems.items.some(({ id_of_expert }) => idOfExpert === id_of_expert);\r\n\r\n  const filterByUser = ({ id_of_user: idOfUser }) =>\r\n    filteredItems.items.some(({ id_of_user }) => idOfUser === id_of_user);\r\n\r\n  useEffect(() => {\r\n    if (shouldFetchData) {\r\n      fetchData();\r\n      setShouldFetchData(false);\r\n    }\r\n  }, [shouldFetchData]);\r\n\r\n  useEffect(() => {\r\n    if (filteredItems.items.length) {\r\n      let filteredPolygons = [];\r\n      let filteredPoints = [];\r\n\r\n      filteredPolygons = initialState.polygons.filter(filterByExpert);\r\n      filteredPoints = initialState.points.filter(filterByExpert);\r\n\r\n      if (filteredItems.isMyObjectsSelectionChecked) {\r\n        const myPolygons = initialState.polygons.filter(filterByUser);\r\n        const myPoints = initialState.points.filter(filterByUser);\r\n\r\n        filteredPolygons = [...filteredPolygons, ...myPolygons];\r\n        filteredPoints = [...filteredPoints, ...myPoints];\r\n      }\r\n\r\n      filteredPoints = removeObjectDuplicates(filteredPoints, 'Id');\r\n      filteredPolygons = removeObjectDuplicates(filteredPolygons, 'polygonId');\r\n\r\n      setFilteredPoints(filteredPoints);\r\n      setFilteredPolygons(filteredPolygons);\r\n    } else {\r\n      setFilteredPoints(initialState.points);\r\n      setFilteredPolygons(initialState.polygons);\r\n    }\r\n  }, [filteredItems]);\r\n\r\n  const addGeographicalObjectToMap = ({ latlng: { lat, lng } }) => {\r\n    if (isAddPointModeEnabled) {\r\n      setNewPointCoordinates([lat, lng]);\r\n      setShowPointModal(true);\r\n      return;\r\n    }\r\n\r\n    if (isAddPolygonModeEnabled) {\r\n      setNewPolygonCoordinates([...newPolygonCoordinates, { lat, lng }]);\r\n    }\r\n  };\r\n\r\n  const finishPolygon = () => {\r\n    setAddPolygonMode(false);\r\n\r\n    if (newPolygonCoordinates.length >= 3) {\r\n      setShowPolygonModal(true);\r\n    } else {\r\n      setNewPolygonCoordinates([]);\r\n    }\r\n  };\r\n\r\n  const updateMapParams = (mapBounds) => {\r\n    const parsedCoordinates = {\r\n      northLatitude: mapBounds._northEast.lat,\r\n      eastLongitude: mapBounds._northEast.lng,\r\n      southLatitude: mapBounds._southWest.lat,\r\n      westLongitude: mapBounds._southWest.lng,\r\n    };\r\n\r\n    setMapCoordinates(parsedCoordinates);\r\n    setShouldFetchData(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LeafletMap\r\n        center={MAP_CENTER_COORDS}\r\n        zoom={6}\r\n        maxZoom={15}\r\n        attributionControl={true}\r\n        zoomControl={true}\r\n        doubleClickZoom={true}\r\n        scrollWheelZoom={true}\r\n        dragging={true}\r\n        animate={true}\r\n        easeLinearity={0.35}\r\n        onClick={addGeographicalObjectToMap}\r\n        onMouseup={(e) => updateMapParams(e.target.getBounds())}\r\n        onZoomEnd={(e) => updateMapParams(e.target.getBounds())}\r\n      >\r\n        <TileLayer url={OPEN_STREET_MAP_URL} />\r\n        <Polygons\r\n          polygons={filteredPolygons}\r\n          setPolygonId={setPolygonId}\r\n          setIsEditPolygonMode={setIsEditPolygonMode}\r\n          setShowPolygonModal={setShowPolygonModal}\r\n        />\r\n        <Points\r\n          points={filteredPoints}\r\n          setPointId={setPointId}\r\n          setIsEditPointMode={setIsEditPointMode}\r\n          setShowPointModal={setShowPointModal}\r\n        />\r\n      </LeafletMap>\r\n      {user && (\r\n        <Navbar expand='lg' className='map-options'>\r\n          <Button\r\n            size='sm'\r\n            variant={\r\n              isAddPointModeEnabled ? 'outline-danger' : 'outline-primary'\r\n            }\r\n            onClick={() => setAddPointMode(!isAddPointModeEnabled)}\r\n          >\r\n            {buttonText('point', isAddPointModeEnabled)}\r\n          </Button>\r\n          <Button\r\n            className='ml-3'\r\n            size='sm'\r\n            variant={\r\n              isAddPolygonModeEnabled ? 'outline-danger' : 'outline-primary'\r\n            }\r\n            onClick={() => setAddPolygonMode(!isAddPolygonModeEnabled)}\r\n          >\r\n            {buttonText('polygon', isAddPolygonModeEnabled)}\r\n          </Button>\r\n          {isAddPolygonModeEnabled && (\r\n            <Button\r\n              className='ml-3'\r\n              size='sm'\r\n              variant='outline-success'\r\n              onClick={finishPolygon}\r\n            >\r\n              Finish polygon\r\n            </Button>\r\n          )}\r\n        </Navbar>\r\n      )}\r\n\r\n      <Filtration user={user} setFilteredItems={setFilteredItems} />\r\n\r\n      <AddPointModal\r\n        show={showPointModal}\r\n        onHide={() => setShowPointModal(false)}\r\n        setShouldFetchData={setShouldFetchData}\r\n        coordinates={newPointCoordinates}\r\n        isEditPointMode={isEditPointMode}\r\n        setIsEditPointMode={setIsEditPointMode}\r\n        pointId={pointId}\r\n        setPointId={setPointId}\r\n        user={user}\r\n      />\r\n      <AddPolygonModal\r\n        show={showPolygonModal}\r\n        onHide={() => setShowPolygonModal(false)}\r\n        setShouldFetchData={setShouldFetchData}\r\n        setNewPolygonCoordinates={setNewPolygonCoordinates}\r\n        coordinates={newPolygonCoordinates}\r\n        user={user}\r\n        isEditPolygonMode={isEditPolygonMode}\r\n        setIsEditPolygonMode={setIsEditPolygonMode}\r\n        polygonId={polygonId}\r\n        setPolygonId={setPolygonId}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport './App.css';\r\nimport { MenuView } from './components/menu';\r\nimport { Home } from './components/home';\r\nimport { MapView } from './components/map';\r\n\r\nexport const App = () => {\r\n  const [user, setUser] = React.useState({});\r\n\r\n  React.useEffect(() => {\r\n    setUser(JSON.parse(sessionStorage.getItem('user')));\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <MenuView user={user} setUser={setUser}/>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/earth\" component={() => <MapView user={user}/>}/>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"react-date-range/dist/styles.css\";\r\nimport \"react-date-range/dist/theme/default.css\";\r\n\r\nimport { App } from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}