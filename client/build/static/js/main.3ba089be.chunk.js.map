{"version":3,"sources":["images/3.jpg","images/1.jpg","images/2.jpg","utils/httpService.js","utils/constants.js","components/auth.jsx","components/modal.jsx","components/login.jsx","components/context/environmentsInfoContext.jsx","components/menu.jsx","components/carousel.jsx","components/KEEMPrinciples.jsx","components/home.jsx","utils/helpers.js","components/chart.jsx","components/dateRangePicker.jsx","components/emissionsLineChart.jsx","components/emissionsChartModal.jsx","components/polygons.jsx","components/points.jsx","components/submitForm.jsx","components/addPointModal.jsx","components/addPolygonModal.jsx","components/filtration.jsx","components/map.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","post","url","body","a","axios","get","put","MAP_CENTER_COORDS","Auth","props","React","useState","login","setLogin","password","setPassword","Container","Row","className","Col","xs","Form","Group","controlId","Label","Control","type","placeholder","value","onChange","e","target","Button","variant","onClick","then","user","data","onHide","setUser","sessionStorage","setItem","JSON","stringify","alert","VerticallyCenteredModal","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","header","Body","children","Footer","Login","modalShow","setModalShow","Fragment","show","environmentsInfoInitialState","selected","environments","EnvironmentsInfoContext","createContext","MenuView","history","useHistory","useContext","environmentsInfo","setEnvironmentsInfo","isActive","Nav","Item","Link","push","NavDropdown","title","map","name","selectedEnvironment","find","selectEnvironment","key","active","user_name","expert_name","removeItem","CarouselView","Carousel","src","img1","alt","Caption","img2","img3","KEEMPrinciples","ListGroup","Home","removeObjectDuplicates","items","prop","filter","obj","index","arr","mapObj","indexOf","formatEmissionsLineChart","emissionCalculations","elementNames","forEach","emission","includes","element","reduce","temp","date","day","month","year","averageCalculations","average","maximumCalculations","max","COLORS","Chart","dataForView","item","toFixed","width","height","cx","cy","label","labelLine","outerRadius","fill","dataKey","isAnimationActive","entry","length","DateRangePickerView","param","setEmissionCalculations","startDate","Date","endDate","addDays","state","setState","useEffect","idEnvironment","toISOString","locale","uk","selection","showSelectionPreview","moveRangeOnFirstSelection","months","ranges","direction","EmissionLineChart","emissions","elementName","setElementName","Object","keys","Dropdown","Toggle","Menu","emissionName","margin","top","right","left","bottom","strokeDasharray","connectNulls","stroke","EmissionsChartModal","isPoint","getEmissionCalculations","chartAverageData","quantity","total","findAverageForEmissionCalculations","chartMaxData","findMaxForEmissionCalculations","Table","exceedingByAverage","gdkAverage","exceedingByMaximum","gdkMax","measure","initialState","Polygons","polygons","setPolygonId","setIsEditPolygonMode","setShowPolygonModal","showEmissionsChartModal","setShowEmissionsChartModal","poligonId","polygonPoints","brushColorR","brushColorG","brushColorB","Polygon","positions","color","Popup","maxWidth","icon","faPencilAlt","striped","bordered","hover","short_name","ValueAvg","ValueMax","Year","Month","Measure","Points","points","setShowPointModal","setPointId","setIsEditPointMode","Id","coordinates","description","Description","image","Image","owner_type","Marker","position","Icon","iconUrl","iconSize","handleClick","now","getFullYear","getMonth","slice","getDate","form","valueAvg","valueMax","gdk","code","SubmitForm","onSave","setIsActive","buttonText","setDate","setAvgValue","gdkAvg","setGdkAvg","setMaxValue","setGdkMax","elements","setElements","selectedElement","setElement","setMeasure","clearForm","min","Alert","environment","selectElement","disabled","split","idElement","ownerType","emptyState","AddPointModal","setShouldFetchData","isEditPointMode","pointId","setName","setDescription","setType","setOwnerType","types","setTypes","ownerTypes","setOwnerTypes","hide","typeOfObject","as","rows","owner_type_id","catch","id_of_user","brushColor","r","g","b","lineThickness","AddPolygonModal","setNewPolygonCoordinates","isEditPolygonMode","polygonId","setLineThickness","setColor","line_thickness","brush_color_r","bruch_color_g","brush_color_b","brush_alfa","onChangeComplete","rgb","line_collor_r","line_color_g","line_color_b","line_alfa","Number","id_of_expert","point","latitude","lat","longitude","lng","order123","Filtration","filtrationForm","setFilteredItems","existingExperts","setExistingExperts","onSubmit","preventDefault","expertCheckboxes","expertCheckbox","myCheckbox","selectedExperts","Array","from","checked","isMyObjectsSelectionChecked","ref","expert","Check","expertName","filteredPolygons","filteredItems","filteredPoints","isAddPointModeEnabled","isAddPolygonModeEnabled","showPointModal","showPolygonModal","newPointCoordinates","newPolygonCoordinates","shouldFetchData","geographicalObj","isModeEnabled","MapView","setFilteredPoints","setAddPointMode","setNewPointCoordinates","setFilteredPolygons","setAddPolygonMode","filterByExpert","idOfExpert","some","filterByUser","idOfUser","fetchData","myPolygons","myPoints","center","zoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","latlng","TileLayer","Navbar","expand","App","parse","getItem","Provider","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3ba089be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/3.6f3cce1c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1.15f33718.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.4b150143.jpg\";","import axios from 'axios';\r\n\r\nasync function post(url, body) {\r\n  return axios.post(url, body);\r\n}\r\n\r\nasync function get(url) {\r\n  return axios.get(url);\r\n}\r\n\r\nasync function put(url, body) {\r\n  return axios.put(url, body);\r\n}\r\n\r\nexport { post, get, put };\r\n","export const LOGIN_URL = '/login';\r\nexport const POLYGONS_URL = '/polygons';\r\nexport const POLYGON_URL = '/polygon';\r\nexport const POINTS_URL = '/points';\r\nexport const POINT_URL = '/point';\r\nexport const TYPE_OF_OBJECT_URL = '/typeofobjects';\r\nexport const EXPERTS_URL = '/experts';\r\nexport const ENVIRONMENTS_URL = '/environments';\r\nexport const ELEMENTS_URL = '/elements';\r\nexport const GDK_URL = '/gdk';\r\nexport const EMISSIONS_CALCULATIONS_URL = '/emissionscalculations';\r\nexport const OWNER_TYPES_URL = '/ownertypes';\r\n\r\nexport const MAP_CENTER_COORDS = [49.0139, 31.2858];\r\nexport const OPEN_STREET_MAP_URL = 'http://{s}.tile.osm.org/{z}/{x}/{y}.png';\r\n","import React from 'react';\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap';\r\n\r\nimport { post } from '../utils/httpService';\r\nimport { LOGIN_URL } from '../utils/constants';\r\n\r\nexport const Auth = (props) => {\r\n  const [login, setLogin] = React.useState('');\r\n  const [password, setPassword] = React.useState('');\r\n\r\n  const loginUser = () => {\r\n    post(LOGIN_URL, {\r\n      login: login,\r\n      password: password\r\n    }).then(({ data: user }) => {\r\n      if (user) {\r\n        props.onHide();\r\n        props.setUser(user);\r\n        sessionStorage.setItem('user', JSON.stringify(user));\r\n      } else {\r\n        alert('Incorrect login/password');\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row className='justify-content-center'>\r\n        <Col xs={6}>\r\n          <Form>\r\n            <Form.Group controlId='formUsername'>\r\n              <Form.Label>Username</Form.Label>\r\n              <Form.Control\r\n                type='input'\r\n                placeholder='Enter username'\r\n                value={login}\r\n                onChange={(e) => setLogin(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='formBasicPassword'>\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type='password'\r\n                placeholder='Password'\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n            <Button variant='primary' onClick={loginUser}>\r\n              Login\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\nexport const VerticallyCenteredModal = (props) => (\r\n  <Modal\r\n    {...props}\r\n    size={props.size || 'lg'}\r\n    aria-labelledby='contained-modal-title-vcenter'\r\n    centered\r\n  >\r\n    <Modal.Header closeButton>\r\n      <Modal.Title id='contained-modal-title-vcenter'>\r\n        {props.header}\r\n      </Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body>{props.children}</Modal.Body>\r\n    <Modal.Footer>\r\n      <Button onClick={props.onHide}>Закрити</Button>\r\n    </Modal.Footer>\r\n  </Modal>\r\n);\r\n","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport { Auth } from './auth';\r\nimport { VerticallyCenteredModal } from './modal';\r\n\r\nexport const Login = (props) => {\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button variant='primary' onClick={() => setModalShow(true)}>\r\n        Увійти\r\n      </Button>\r\n      <VerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        header=\"Увійти до персонального акаунту\"\r\n      >\r\n        <Auth onHide={() => setModalShow(false)} setUser={props.setUser} />\r\n      </VerticallyCenteredModal>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React, { createContext } from 'react';\r\n\r\nexport const environmentsInfoInitialState = {\r\n  selected: null,\r\n  environments: [],\r\n};\r\n\r\nexport const EnvironmentsInfoContext = createContext(\r\n  environmentsInfoInitialState\r\n);\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { Login } from './login';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport { Button, NavDropdown } from 'react-bootstrap';\r\nimport { useContext } from 'react';\r\nimport { EnvironmentsInfoContext } from './context/environmentsInfoContext';\r\n\r\nexport const MenuView = ({ user, setUser }) => {\r\n  const history = useHistory();\r\n\r\n  const { environmentsInfo, setEnvironmentsInfo } = useContext(\r\n    EnvironmentsInfoContext\r\n  );\r\n\r\n  const logOut = () => {\r\n    setUser(null);\r\n    sessionStorage.removeItem('user');\r\n  };\r\n\r\n  const selectEnvironment = (id) => {\r\n    const selectedEnvironment = environmentsInfo.environments.find(\r\n      ({ id: environmentId }) => +environmentId === +id\r\n    );\r\n\r\n    setEnvironmentsInfo({\r\n      selected: selectedEnvironment,\r\n      environments: environmentsInfo.environments,\r\n    });\r\n\r\n    history.push('/earth');\r\n  };\r\n\r\n  const isActive = (id) => {\r\n    const { selected } = environmentsInfo;\r\n    if (selected) {\r\n      return id === selected.id;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  const navigateToHome = () => {\r\n    setEnvironmentsInfo({\r\n      selected: null,\r\n      environments: environmentsInfo.environments,\r\n    });\r\n\r\n    history.push('/');\r\n  };\r\n\r\n  return (\r\n    <Nav className='justify-content-between container mt-2 mb-2'>\r\n      <Nav.Item className='d-flex align-items-center'>\r\n        <Nav.Link variant='link' onClick={() => navigateToHome()}>\r\n          Домашня сторінка\r\n        </Nav.Link>\r\n        <NavDropdown title='Карти зображень'>\r\n          {environmentsInfo.environments.map(({ id, name }) => (\r\n            <NavDropdown.Item\r\n              onClick={() => selectEnvironment(id)}\r\n              key={id}\r\n              active={isActive(id)}\r\n            >\r\n              {name}\r\n            </NavDropdown.Item>\r\n          ))}\r\n        </NavDropdown>\r\n      </Nav.Item>\r\n      <Nav.Item>\r\n        {user ? (\r\n          <div className='d-flex align-items-center'>\r\n            <h4 className='mr-2 mb-0'>\r\n              Вітаємо, {user.user_name} ({user.expert_name})\r\n            </h4>\r\n            <Button variant='outline-secondary' size='md' onClick={logOut}>\r\n              Вийти\r\n            </Button>\r\n          </div>\r\n        ) : (\r\n          <Login setUser={setUser} />\r\n        )}\r\n      </Nav.Item>\r\n    </Nav>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Carousel } from 'react-bootstrap';\r\n\r\nimport img1 from '../images/1.jpg';\r\nimport img2 from '../images/2.jpg';\r\nimport img3 from '../images/3.jpg';\r\n\r\nexport const CarouselView = () => {\r\n  return (\r\n    <Carousel className='carousel'>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img1} alt='First slide' />\r\n        <Carousel.Caption>\r\n          <h3>Управління водними ресурсами</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img2} alt='Second slide' />\r\n\r\n        <Carousel.Caption>\r\n          <h3>Комплексний еколого-економічний моніторинг</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img3} alt='Third slide' />\r\n\r\n        <Carousel.Caption>\r\n          <h3>Управління відходами</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img3} alt='Fourth slide' />\r\n\r\n        <Carousel.Caption>\r\n          <h3>Охорона земель</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img3} alt='Fifth slide' />\r\n\r\n        <Carousel.Caption>\r\n          <h3>Атмосферне повітря</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      <Carousel.Item>\r\n        <img className='w-100' src={img3} alt='Sixth slide' />\r\n\r\n        <Carousel.Caption>\r\n          <h3>Здоров'я населення</h3>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n    </Carousel>\r\n  );\r\n};\r\n","import { ListGroup } from 'react-bootstrap';\r\nimport React from 'react';\r\n\r\nexport const KEEMPrinciples = () => {\r\n  return (\r\n    <ListGroup>\r\n      <h4>\r\n        Комплексний еколого-економічний моніторинг (КЕЕМ) базується на таких\r\n        основних принципах:\r\n      </h4>\r\n      <ListGroup.Item>\r\n        Збір різнорідної екологічної інформації з різних точок регіону.\r\n      </ListGroup.Item>\r\n      <ListGroup.Item>\r\n        Оброблення великих масивів даних різними експертами.\r\n      </ListGroup.Item>\r\n      <ListGroup.Item>\r\n        Одночасна робота різних експертів з екологічною інформацією та\r\n        інформацією від інших експертів.\r\n      </ListGroup.Item>\r\n      <ListGroup.Item>\r\n        Відображення екологічної інформації на карті місцевості для наочності.\r\n      </ListGroup.Item>\r\n      <ListGroup.Item>\r\n        Дослідження екологічної інформації за допомогою різних видів\r\n        математичного аналізу.\r\n      </ListGroup.Item>\r\n      <ListGroup.Item>\r\n        Оцінка ситуації у визначеному регіоні з точки зору закону та визначення\r\n        законності набору заходів по покращенню екологічного стану регіону або\r\n        ліквідації наслідків надзвичайних ситуацій.\r\n      </ListGroup.Item>\r\n    </ListGroup>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { CarouselView } from './carousel';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport { KEEMPrinciples } from './KEEMPrinciples';\r\n\r\nexport const Home = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <CarouselView />\r\n      <Container>\r\n        <Row className='justify-content-center mt-5 mb-5'>\r\n          <Col xs={12}>\r\n            <KEEMPrinciples />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","export const transformEmissions = (emissions) => {\r\n  const elementIds = [...new Set(emissions.map(({ idElement }) => idElement))];\r\n\r\n  // {\r\n  //     [element]: { [Year]: { [Month]: { avg: ValueAvg, max: ValueMax } } }\r\n  // }\r\n  let transformedData = {};\r\n\r\n  emissions.forEach(({ idElement, ValueAvg, ValueMax, Year, Month }) => {\r\n    elementIds.forEach((elementId) => {\r\n      if (elementId === idElement) {\r\n        if (transformedData[elementId]) {\r\n          if (transformedData[idElement][Year]) {\r\n            if (transformedData[idElement][Year][Month]) {\r\n              const { avg, max } = transformedData[idElement][Year][Month];\r\n\r\n              transformedData[idElement][Year][Month] = {\r\n                avg: ValueAvg + avg,\r\n                max: ValueMax + max,\r\n              };\r\n            } else {\r\n              transformedData[idElement][Year][Month] = {\r\n                avg: ValueAvg,\r\n                max: ValueMax,\r\n              };\r\n            }\r\n          } else {\r\n            transformedData[idElement][Year] = {\r\n              [Month]: { avg: ValueAvg, max: ValueMax },\r\n            };\r\n          }\r\n        } else {\r\n          transformedData[idElement] = {\r\n            [Year]: { [Month]: { avg: ValueAvg, max: ValueMax } },\r\n          };\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  return transformedData;\r\n};\r\n\r\nexport const formatMonthDataForBarChart = (\r\n  transformedEmissions,\r\n  elementId,\r\n  year\r\n) =>\r\n  transformedEmissions &&\r\n  elementId &&\r\n  year &&\r\n  Object.keys(transformedEmissions[elementId][year]).map((month) => ({\r\n    month,\r\n    average: transformedEmissions[elementId][year][month].avg,\r\n    max: transformedEmissions[elementId][year][month].max,\r\n  }));\r\n\r\nexport const getElementName = (emissions, emissionId) => [\r\n  ...new Set(\r\n    emissions\r\n      .filter(({ idElement }) => Number(emissionId) === idElement)\r\n      .map(({ short_name }) => short_name)\r\n  ),\r\n];\r\n\r\nexport const removeObjectDuplicates = (items, prop) =>\r\n  items.filter(\r\n    (obj, index, arr) =>\r\n      arr.map((mapObj) => mapObj[prop]).indexOf(obj[prop]) === index\r\n  );\r\n\r\nexport const findAverageForEmissionCalculations = (emissionCalculations) => {\r\n  const elementNames = [];\r\n\r\n  emissionCalculations.forEach((emission) => {\r\n    if (!elementNames.includes(emission.element)) {\r\n      elementNames.push(emission.element);\r\n    }\r\n  });\r\n\r\n  return elementNames.map((name) => {\r\n    let temp = { name, quantity: 0, total: 0 };\r\n\r\n    emissionCalculations.forEach((emission) => {\r\n      if (temp.name === emission.element) {\r\n        temp.total += emission.averageCalculations.average;\r\n        temp.quantity++;\r\n      }\r\n    });\r\n\r\n    return {\r\n      name: temp.name,\r\n      value: temp.total / temp.quantity,\r\n    };\r\n  });\r\n};\r\n\r\nexport const findMaxForEmissionCalculations = (emissionCalculations) => {\r\n  const elementNames = [];\r\n\r\n  emissionCalculations.forEach((emission) => {\r\n    if (!elementNames.includes(emission.element)) {\r\n      elementNames.push(emission.element);\r\n    }\r\n  });\r\n\r\n  return elementNames.map((name) => {\r\n    let temp = { name, value: 0 };\r\n\r\n    emissionCalculations.forEach((emission) => {\r\n      if (temp.name === emission.element) {\r\n        if (emission.maximumCalculations.max > temp.value) {\r\n          temp.value = emission.maximumCalculations.max;\r\n        }\r\n      }\r\n    });\r\n\r\n    return temp;\r\n  });\r\n};\r\n\r\nexport const formatEmissionsLineChart = (emissionCalculations) => {\r\n  const elementNames = [];\r\n\r\n  emissionCalculations.forEach((emission) => {\r\n    if (!elementNames.includes(emission.element)) {\r\n      elementNames.push(emission.element);\r\n    }\r\n  });\r\n\r\n  return elementNames.reduce((obj, name) => {\r\n    const temp = [];\r\n    emissionCalculations.forEach((emission) => {\r\n      if (name === emission.element) {\r\n        temp.push({\r\n          name: `${emission.date.day}-${emission.date.month}-${emission.date.year}`,\r\n          'Середнє значення': emission.averageCalculations.average,\r\n          'Максимальне значення': emission.maximumCalculations.max,\r\n        });\r\n      }\r\n    });\r\n    obj[name] = temp;\r\n\r\n    return obj;\r\n  }, {});\r\n};\r\n","import React from 'react';\r\nimport {\r\n    PieChart, Pie, Cell,\r\n} from 'recharts';\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\r\nconst valuePrecision = 4;\r\n\r\nexport const Chart = ({ title, data }) => {\r\n  const dataForView = data.map(item => ({...item, value: +item.value.toFixed(valuePrecision)}));\r\n  return (\r\n    <div>\r\n    <h3>{title}</h3>\r\n    <PieChart width={400} height={400}>\r\n      <Pie\r\n        data={dataForView}\r\n        cx={200}\r\n        cy={200}\r\n        label\r\n        labelLine={false}\r\n        outerRadius={80}\r\n        fill=\"#8884d8\"\r\n        dataKey=\"value\"\r\n        isAnimationActive={false}\r\n      >\r\n        {\r\n          data.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]}/>)\r\n        }\r\n      </Pie>\r\n    </PieChart>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { DateRangePicker } from 'react-date-range';\r\nimport { addDays } from 'date-fns';\r\nimport { uk } from 'date-fns/locale';\r\n\r\nimport { EMISSIONS_CALCULATIONS_URL } from '../utils/constants';\r\nimport { get } from '../utils/httpService';\r\nimport { useContext } from 'react';\r\nimport { EnvironmentsInfoContext } from './context/environmentsInfoContext';\r\n\r\nexport const DateRangePickerView = ({ id, param, setEmissionCalculations }) => {\r\n  const { environmentsInfo } = useContext(EnvironmentsInfoContext);\r\n\r\n  const [state, setState] = React.useState([\r\n    {\r\n      startDate: new Date(),\r\n      endDate: addDays(new Date(), 7),\r\n      key: 'selection',\r\n    },\r\n  ]);\r\n\r\n  React.useEffect(() => {\r\n    const [date] = state;\r\n\r\n    const idEnvironment = environmentsInfo.selected.id;\r\n\r\n    get(\r\n      `${EMISSIONS_CALCULATIONS_URL}?idEnvironment=${idEnvironment}&${param}=${id}&startDate=${date.startDate.toISOString()}&endDate=${date.endDate.toISOString()}`\r\n    ).then(({ data }) => setEmissionCalculations(data));\r\n  }, [id, state]);\r\n\r\n  return (\r\n    <DateRangePicker\r\n      locale={uk}\r\n      onChange={(item) => setState([item.selection])}\r\n      showSelectionPreview={true}\r\n      moveRangeOnFirstSelection={false}\r\n      months={2}\r\n      ranges={state}\r\n      direction='horizontal'\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport {\r\n    LineChart,\r\n    Line,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n} from \"recharts\";\r\n\r\nexport const EmissionLineChart = ({ emissions }) => {\r\n    const [elementName, setElementName] = React.useState(\"\");\r\n\r\n    if (!emissions) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {Object.keys(emissions).length > 0 && (\r\n                <Dropdown className=\"mr-2 mb-2\">\r\n                    <Dropdown.Toggle size=\"md\">\r\n                        {elementName || \"Оберіть елемент\"}\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu>\r\n                        {emissions &&\r\n                            Object.keys(emissions).map((emissionName) => (\r\n                                <Dropdown.Item\r\n                                    key={emissionName}\r\n                                    active={emissionName === elementName}\r\n                                    onClick={() => {\r\n                                        setElementName(emissionName);\r\n                                    }}\r\n                                >\r\n                                    {emissionName}\r\n                                </Dropdown.Item>\r\n                            ))}\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            )}\r\n            {Object.keys(emissions).length > 0 && elementName && (\r\n                <LineChart\r\n                    width={500}\r\n                    height={200}\r\n                    data={emissions[elementName]}\r\n                    margin={{\r\n                        top: 10,\r\n                        right: 30,\r\n                        left: 0,\r\n                        bottom: 0,\r\n                    }}\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Line\r\n                        connectNulls\r\n                        type=\"monotone\"\r\n                        dataKey=\"Середнє значення\"\r\n                        stroke=\"#8884d8\"\r\n                    />\r\n                    <Line\r\n                        connectNulls\r\n                        type=\"monotone\"\r\n                        dataKey=\"Максимальне значення\"\r\n                        stroke=\"#82ca9d\"\r\n                    />\r\n                </LineChart>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nimport { get } from '../utils/httpService';\r\nimport { EMISSIONS_CALCULATIONS_URL } from '../utils/constants';\r\n\r\nimport { findAverageForEmissionCalculations, findMaxForEmissionCalculations, formatEmissionsLineChart } from '../utils/helpers';\r\n\r\nimport { VerticallyCenteredModal } from './modal';\r\nimport { Chart } from './chart';\r\nimport { DateRangePickerView } from './dateRangePicker';\r\nimport { EmissionLineChart } from \"./emissionsLineChart\";\r\n\r\nimport './emissionsChartModal.css';\r\nimport { EnvironmentsInfoContext } from './context/environmentsInfoContext';\r\n\r\nconst valuesPrecision = 2;\r\nconst emptyState = 'Немає даних';\r\n\r\nexport const EmissionsChartModal = ({\r\n  id,\r\n  isPoint,\r\n  onHide,\r\n  show,\r\n  emissions,\r\n}) => {\r\n  const { environmentsInfo } = useContext(EnvironmentsInfoContext);\r\n  const param = isPoint ? 'idPoi' : 'idPolygon';\r\n  const [emissionCalculations, setEmissionCalculations] = React.useState([]);\r\n\r\n  React.useEffect(() => {\r\n    getEmissionCalculations(id);\r\n  }, [id]);\r\n\r\n  const getEmissionCalculations = (id) => {\r\n    const idEnvironment = environmentsInfo.selected.id;\r\n\r\n    get(\r\n      `${EMISSIONS_CALCULATIONS_URL}?idEnvironment=${idEnvironment}&${param}=${id}`\r\n    ).then(({ data }) => setEmissionCalculations(data));\r\n  };\r\n\r\n  const chartAverageData =\r\n    emissionCalculations && emissionCalculations.length > 0\r\n      ? findAverageForEmissionCalculations(emissionCalculations)\r\n      : [];\r\n\r\n  const chartMaxData =\r\n    emissionCalculations && emissionCalculations.length > 0\r\n      ? findMaxForEmissionCalculations(emissionCalculations)\r\n      : [];\r\n\r\n  return (\r\n    <VerticallyCenteredModal\r\n      size='xl'\r\n      show={show}\r\n      onHide={onHide}\r\n      header='Відобразити викиди'\r\n    >\r\n      <h4 className='mb-3'>\r\n        Оберіть дати для відображення викидів за певний період\r\n      </h4>\r\n      <DateRangePickerView\r\n        id={id}\r\n        param={param}\r\n        setEmissionCalculations={setEmissionCalculations}\r\n      />\r\n      {emissionCalculations.length > 0 ? (\r\n        <Table className='emissions-table'>\r\n          <thead>\r\n            <tr>\r\n              <th title='Елемент'>Елемент</th>\r\n              <th title='Дата'>Дата</th>\r\n              <th title='Одиниця виміру'>Одиниця виміру</th>\r\n              <th title='Середнє значення average викидів'>\r\n                Середнє значення average викидів\r\n              </th>\r\n              <th title='ГДК average'>ГДК average</th>\r\n              <th title='Перевищення ГДК average'>Перевищення ГДК average</th>\r\n              <th title='Max викидів'>Max викидів</th>\r\n              <th title='ГДК max'>ГДК max</th>\r\n              <th title='Перевищення ГДК max'>Перевищення ГДК max</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {emissionCalculations.map((emission, id) => {\r\n              const exceedingByAverage = emission.averageCalculations.gdkAverage\r\n                ? (\r\n                    emission.averageCalculations.gdkAverage -\r\n                    emission.averageCalculations.average\r\n                  ).toFixed(valuesPrecision)\r\n                : emptyState;\r\n\r\n              const exceedingByMaximum = emission.maximumCalculations.gdkMax\r\n                ? (\r\n                    emission.maximumCalculations.gdkMax -\r\n                    emission.maximumCalculations.max\r\n                  ).toFixed(valuesPrecision)\r\n                : emptyState;\r\n\r\n              return (\r\n                <tr key={id}>\r\n                  <td title={emission.element}>{emission.element}</td>\r\n                  <td\r\n                    title={emission.date}\r\n                  >{`${emission.date.day}/${emission.date.month}/${emission.date.year}`}</td>\r\n                  <td title={emission.measure}>{emission.measure}</td>\r\n                  <td title={emission.averageCalculations.average}>\r\n                    {emission.averageCalculations.average.toFixed(\r\n                      valuesPrecision\r\n                    )}\r\n                  </td>\r\n                  <td\r\n                    title={\r\n                      emission.averageCalculations.gdkAverage || emptyState\r\n                    }\r\n                  >\r\n                    {emission.averageCalculations.gdkAverage || emptyState}\r\n                  </td>\r\n                  <td title={exceedingByAverage}>{exceedingByAverage}</td>\r\n                  <td title={emission.maximumCalculations.max}>\r\n                    {emission.maximumCalculations.max.toFixed(valuesPrecision)}\r\n                  </td>\r\n                  <td title={emission.maximumCalculations.gdkMax || emptyState}>\r\n                    {emission.maximumCalculations.gdkMax || emptyState}\r\n                  </td>\r\n                  <td title={exceedingByMaximum}>{exceedingByMaximum}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n      ) : (\r\n        <h6 className='mt-3 mb-3'>\r\n          Немає інформації про викиди за обраний період\r\n        </h6>\r\n      )}\r\n      <div className=\"d-flex justify-content-around\">\r\n        {chartAverageData.length > 0 && (\r\n          <Chart title=\"Графік середніх викидів\" data={chartAverageData} />\r\n        )}\r\n        {chartMaxData.length > 0 && (\r\n          <Chart title=\"Графік максимальних викидів\" data={chartMaxData} />\r\n        )}\r\n      </div>\r\n      {emissionCalculations.length > 0 && (\r\n        <>\r\n          <h4 className='mb-3'>\r\n            Оберіть елемент та для відображення викидів за допомогою графіка\r\n          </h4>\r\n          <EmissionLineChart\r\n            emissions={formatEmissionsLineChart(emissionCalculations)}\r\n          />\r\n        </>\r\n      )}\r\n    </VerticallyCenteredModal>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Popup, Polygon } from 'react-leaflet';\r\nimport { Button, Table } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { EmissionsChartModal } from './emissionsChartModal';\r\n\r\nimport './popup.css';\r\n\r\nconst initialState = {\r\n  showEmissionsChartModal: false,\r\n  emissionCalculations: [],\r\n};\r\n\r\nexport const Polygons = ({\r\n  polygons,\r\n  setPolygonId,\r\n  setIsEditPolygonMode,\r\n  setShowPolygonModal,\r\n}) => {\r\n  const handleClick = (polygonId) => {\r\n    setPolygonId(polygonId);\r\n    setIsEditPolygonMode(true);\r\n    setShowPolygonModal(true);\r\n  };\r\n\r\n  const [showEmissionsChartModal, setShowEmissionsChartModal] = React.useState(\r\n    initialState.showEmissionsChartModal\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {polygons.map(\r\n        ({\r\n          poligonId,\r\n          polygonPoints,\r\n          brushColorR,\r\n          brushColorG,\r\n          brushColorB,\r\n          user_name,\r\n          name,\r\n          emissions,\r\n        }) => (\r\n          <Polygon\r\n            key={poligonId}\r\n            positions={polygonPoints}\r\n            color={`rgba(${brushColorR}, ${brushColorG}, ${brushColorB}, 1)`}\r\n          >\r\n            <Popup maxWidth='auto'>\r\n              <FontAwesomeIcon\r\n                icon={faPencilAlt}\r\n                onClick={() => handleClick(poligonId)}\r\n                className='edit-pencil-icon'\r\n              />\r\n              <div className='mt-4 mb-2'>\r\n                {name && (\r\n                  <div>\r\n                    <strong>Назва:</strong> {name}\r\n                  </div>\r\n                )}\r\n                {user_name && (\r\n                  <div>\r\n                    <strong>Керівник який поставив:</strong> {user_name}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {emissions && emissions.length > 0 && (\r\n                <>\r\n                  <Table\r\n                    striped\r\n                    bordered\r\n                    hover\r\n                    size='sm'\r\n                    className='emissions-table'\r\n                  >\r\n                    <thead>\r\n                      <tr>\r\n                        <th title='Хімічний елемент'>Хімічний елемент</th>\r\n                        <th title='Середнє значення'>Середнє значення</th>\r\n                        <th title='Максимальне значення'>\r\n                          Максимальне значення\r\n                        </th>\r\n                        <th title='Рік'>Рік</th>\r\n                        <th title='Місяць'>Місяць</th>\r\n                        <th title='День'>День</th>\r\n                        <th title='Одиниця виміру'>Одиниця виміру</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {emissions.map(\r\n                        (\r\n                          {\r\n                            short_name,\r\n                            ValueAvg,\r\n                            ValueMax,\r\n                            Year,\r\n                            Month,\r\n                            day,\r\n                            Measure,\r\n                          },\r\n                          key\r\n                        ) => (\r\n                          <tr key={key}>\r\n                            <td title={short_name}>{short_name}</td>\r\n                            <td title={ValueAvg}>{ValueAvg}</td>\r\n                            <td title={ValueMax}>{ValueMax}</td>\r\n                            <td title={Year}>{Year}</td>\r\n                            <td title={Month}>{Month}</td>\r\n                            <td title={day}>{day}</td>\r\n                            <td title={Measure}>{Measure}</td>\r\n                          </tr>\r\n                        )\r\n                      )}\r\n                    </tbody>\r\n                  </Table>\r\n                  <Button\r\n                    size='sm'\r\n                    onClick={() => setShowEmissionsChartModal(true)}\r\n                  >\r\n                    Відобразити графіки викидів\r\n                  </Button>\r\n                </>\r\n              )}\r\n              <EmissionsChartModal\r\n                id={poligonId}\r\n                emissions={emissions}\r\n                show={showEmissionsChartModal}\r\n                onHide={() => setShowEmissionsChartModal(false)}\r\n              />\r\n            </Popup>\r\n          </Polygon>\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Popup, Marker } from 'react-leaflet';\r\nimport { Icon } from 'leaflet/dist/leaflet-src.esm';\r\nimport { Button, Table } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { EmissionsChartModal } from './emissionsChartModal';\r\n\r\nimport './popup.css';\r\n\r\nexport const Points = ({\r\n  points,\r\n  setShowPointModal,\r\n  setPointId,\r\n  setIsEditPointMode,\r\n}) => {\r\n  const handleClick = (id) => {\r\n    setPointId(id);\r\n    setIsEditPointMode(true);\r\n    setShowPointModal(true);\r\n  };\r\n\r\n  const [showEmissionsChartModal, setShowEmissionsChartModal] = React.useState(\r\n    false\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {points.map(\r\n        ({\r\n          Id: id,\r\n          coordinates,\r\n          name,\r\n          Description: description,\r\n          Image: image,\r\n          emissions,\r\n          owner_type,\r\n        }) => (\r\n          <Marker\r\n            key={id}\r\n            position={coordinates}\r\n            icon={\r\n              new Icon({\r\n                iconUrl: image,\r\n                iconSize: [20, 30],\r\n              })\r\n            }\r\n          >\r\n            <Popup maxWidth='auto'>\r\n              <FontAwesomeIcon\r\n                icon={faPencilAlt}\r\n                onClick={() => handleClick(id)}\r\n                className='edit-pencil-icon'\r\n              />\r\n              <div className='mt-4 mb-2'>\r\n                {name && (\r\n                  <div>\r\n                    <strong>Назва:</strong> {name}\r\n                  </div>\r\n                )}\r\n                {description && (\r\n                  <div>\r\n                    <strong>Опис:</strong> {description}\r\n                  </div>\r\n                )}\r\n                {owner_type && (\r\n                  <div>\r\n                    <strong>Форма власності:</strong> {owner_type.name}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {emissions.length > 0 && (\r\n                <>\r\n                  <Table\r\n                    striped\r\n                    bordered\r\n                    hover\r\n                    size='sm'\r\n                    className='emissions-table'\r\n                  >\r\n                    <thead>\r\n                      <tr>\r\n                        <th title='Хімічний елемент'>Хімічний елемент</th>\r\n                        <th title='Середнє значення'>Середнє значення</th>\r\n                        <th title='Максимальне значення'>\r\n                          Максимальне значення\r\n                        </th>\r\n                        <th title='Рік'>Рік</th>\r\n                        <th title='Місяць'>Місяць</th>\r\n                        <th title='День'>День</th>\r\n                        <th title='Одиниця виміру'>Одиниця виміру</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {emissions.map(\r\n                        (\r\n                          {\r\n                            short_name,\r\n                            ValueAvg,\r\n                            ValueMax,\r\n                            Year,\r\n                            Month,\r\n                            day,\r\n                            Measure,\r\n                          },\r\n                          key\r\n                        ) => (\r\n                          <tr key={key}>\r\n                            <td title={short_name}>{short_name}</td>\r\n                            <td title={ValueAvg}>{ValueAvg}</td>\r\n                            <td title={ValueMax}>{ValueMax}</td>\r\n                            <td title={Year}>{Year}</td>\r\n                            <td title={Month}>{Month}</td>\r\n                            <td title={day}>{day}</td>\r\n                            <td title={Measure}>{Measure}</td>\r\n                          </tr>\r\n                        )\r\n                      )}\r\n                    </tbody>\r\n                  </Table>\r\n                  <Button\r\n                    size='sm'\r\n                    onClick={() => setShowEmissionsChartModal(true)}\r\n                  >\r\n                    Відобразити графіки викидів\r\n                  </Button>\r\n                </>\r\n              )}\r\n              <EmissionsChartModal\r\n                isPoint\r\n                id={id}\r\n                emissions={emissions}\r\n                show={showEmissionsChartModal}\r\n                onHide={() => setShowEmissionsChartModal(false)}\r\n              />\r\n            </Popup>\r\n          </Marker>\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Dropdown, Form, Alert } from 'react-bootstrap';\r\n\r\nimport { ELEMENTS_URL, GDK_URL } from '../utils/constants';\r\nimport { post, get } from '../utils/httpService';\r\n\r\nimport './submitForm.css';\r\nimport { useContext } from 'react';\r\nimport { EnvironmentsInfoContext } from './context/environmentsInfoContext';\r\n\r\nconst now = new Date();\r\nconst year = now.getFullYear();\r\nconst month = ('0' + (now.getMonth() + 1)).slice(-2);\r\nconst day = ('0' + now.getDate()).slice(-2);\r\n\r\nconst initialState = {\r\n  form: {\r\n    date: now,\r\n    valueAvg: 0,\r\n    valueMax: 0,\r\n    gdk: 100000,\r\n    element: {\r\n      code: 0,\r\n      short_name: 'Оберіть елемент',\r\n    },\r\n    measure: '',\r\n  },\r\n};\r\n\r\nexport const SubmitForm = ({ onSave }) => {\r\n  const { environmentsInfo } = useContext(EnvironmentsInfoContext);\r\n\r\n  const [isActive, setIsActive] = useState(false);\r\n  const buttonText = isActive ? 'Сховати' : 'Показати більше';\r\n\r\n  const [date, setDate] = useState(initialState.form.date);\r\n  const [valueAvg, setAvgValue] = useState(initialState.form.valueAvg);\r\n  const [gdkAvg, setGdkAvg] = useState(initialState.form.gdk);\r\n  const [valueMax, setMaxValue] = useState(initialState.form.valueMax);\r\n  const [gdkMax, setGdkMax] = useState(initialState.form.gdk);\r\n  const [elements, setElements] = useState([]);\r\n  const [selectedElement, setElement] = useState(initialState.form.element);\r\n  const [measure, setMeasure] = useState(initialState.form.measure);\r\n\r\n  const clearForm = () => {\r\n    setDate(initialState.form.date);\r\n    setAvgValue(initialState.form.valueAvg);\r\n    setGdkAvg(initialState.form.gdk);\r\n    setMaxValue(initialState.form.valueMax);\r\n    setGdkMax(initialState.form.gdk);\r\n    setElement(initialState.form.element);\r\n    setMeasure(initialState.form.measure);\r\n  };\r\n\r\n  const onClick = () => {\r\n    clearForm();\r\n    setIsActive(!isActive);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    let emission;\r\n\r\n    if (isActive && date) {\r\n      const [year, month, day] = date.split('-');\r\n\r\n      emission = isActive && {\r\n        valueAvg,\r\n        valueMax,\r\n        year,\r\n        month,\r\n        day,\r\n        idElement: selectedElement.code,\r\n        idEnvironment: environmentsInfo.selected.id,\r\n        measure,\r\n      };\r\n    }\r\n\r\n    onSave(emission);\r\n    clearForm();\r\n  };\r\n\r\n  const selectElement = (element) => {\r\n    setElement(element);\r\n    setMeasure(element.measure);\r\n\r\n    post(GDK_URL, {\r\n      code: element.code,\r\n      environment: environmentsInfo.selected.id,\r\n    }).then(({ data }) => {\r\n      if (data.average && data.max) {\r\n        setGdkAvg(data.average);\r\n        setGdkMax(data.max);\r\n      } else {\r\n        setGdkAvg(initialState.form.valueAvg);\r\n        setGdkMax(initialState.form.valueMax);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleDate = (e) => {\r\n    if (new Date(e.target.value) > now) {\r\n      setDate(`${year}-${month}-${day}`);\r\n    } else {\r\n      setDate(e.target.value);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    get(ELEMENTS_URL).then(({ data }) => setElements(data));\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className='d-flex justify-content-center'>\r\n        <Button onClick={onClick}>{buttonText}</Button>\r\n      </div>\r\n      {isActive && (\r\n        <>\r\n          <Form.Group>\r\n            <Form.Label>Оберіть дату</Form.Label>\r\n            <Form.Control type='date' value={date} onChange={handleDate} />\r\n          </Form.Group>\r\n\r\n          <Form.Group>\r\n            <Form.Label>Введіть середнє значення</Form.Label>\r\n            <Form.Control\r\n              type='number'\r\n              min='0'\r\n              value={valueAvg}\r\n              onChange={(e) => setAvgValue(+e.target.value)}\r\n            />\r\n          </Form.Group>\r\n          {gdkAvg > 0 && gdkAvg < valueAvg && (\r\n            <Alert variant='danger'>\r\n              Середнє значення перевищує ГДК ({gdkAvg})\r\n            </Alert>\r\n          )}\r\n\r\n          <Form.Group>\r\n            <Form.Label>ВВедіть максимальне значення</Form.Label>\r\n            <Form.Control\r\n              type='number'\r\n              min='0'\r\n              value={valueMax}\r\n              onChange={(e) => setMaxValue(+e.target.value)}\r\n            />\r\n          </Form.Group>\r\n          {gdkMax > 0 && gdkMax < valueMax && (\r\n            <Alert variant='danger'>\r\n              Максимальне значення перевищує ГДК({gdkMax})\r\n            </Alert>\r\n          )}\r\n\r\n          <Form.Group>\r\n            <Dropdown>\r\n              <Dropdown.Toggle size='sm' variant='success'>\r\n                {selectedElement.short_name}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu className='form-dropdown'>\r\n                {elements.length &&\r\n                  elements.map((element) => (\r\n                    <Dropdown.Item\r\n                      key={element.code}\r\n                      onClick={() => selectElement(element)}\r\n                    >\r\n                      {element.short_name}\r\n                    </Dropdown.Item>\r\n                  ))}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </Form.Group>\r\n\r\n          {measure && (\r\n            <Form.Group>\r\n              <Form.Label>Розмірність</Form.Label>\r\n              <Form.Control type='input' disabled value={measure} />\r\n            </Form.Group>\r\n          )}\r\n        </>\r\n      )}\r\n      <Button variant='outline-primary' onClick={handleSubmit}>\r\n        Зберегти\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Dropdown, Form } from \"react-bootstrap\";\r\n\r\nimport { TYPE_OF_OBJECT_URL, OWNER_TYPES_URL } from \"../utils/constants\";\r\nimport { post, get, put } from \"../utils/httpService\";\r\nimport { POINT_URL } from \"../utils/constants\";\r\n\r\nimport { VerticallyCenteredModal } from \"./modal\";\r\nimport { SubmitForm } from './submitForm';\r\n\r\nimport \"./submitForm.css\";\r\n\r\nconst initialState = {\r\n  form: {\r\n    name: \"\",\r\n    description: \"\",\r\n    type: {\r\n      id: 0,\r\n      name: ''\r\n    },\r\n    ownerType: {\r\n      id: 0,\r\n      type: ''\r\n    }\r\n  }\r\n};\r\n\r\nconst emptyState = {\r\n  typeOfObject: `Оберіть тип об'єкту`,\r\n  ownerType: `Оберіть форму власності`\r\n};\r\n\r\nexport const AddPointModal = ({\r\n  onHide,\r\n  show,\r\n  coordinates,\r\n  setShouldFetchData,\r\n  isEditPointMode,\r\n  setIsEditPointMode,\r\n  pointId,\r\n  setPointId,\r\n  user,\r\n}) => {\r\n  const [name, setName] = useState(initialState.form.name);\r\n  const [description, setDescription] = useState(initialState.form.description);\r\n  const [type, setType] = useState(initialState.form.type);\r\n  const [ownerType, setOwnerType] = useState(initialState.form.ownerType);\r\n  const [types, setTypes] = useState([]);\r\n  const [ownerTypes, setOwnerTypes] = useState([]);\r\n\r\n  const clearForm = () => {\r\n    setName(initialState.form.name);\r\n    setDescription(initialState.form.description);\r\n    setType(initialState.form.type);\r\n    setOwnerType(initialState.form.ownerType);\r\n  };\r\n\r\n  const addPoint = emission => {\r\n    post(POINT_URL, {\r\n      name,\r\n      description,\r\n      type: type.id,\r\n      coordinates,\r\n      emission,\r\n      id_of_user: user.id_of_user,\r\n      owner_type_id: ownerType.id,\r\n    }).then(() => {\r\n      clearForm();\r\n      onHide();\r\n      setShouldFetchData(true);\r\n    }).catch(() => setShouldFetchData(false))\r\n  };\r\n\r\n  const editPoint = emission => {\r\n    put(`${POINT_URL}/${pointId}`, {\r\n      name,\r\n      description,\r\n      type: type.id,\r\n      owner_type_id: ownerType.id,\r\n      emission\r\n    }).then(() => {\r\n      clearForm();\r\n      onHide();\r\n      setShouldFetchData(true);\r\n      setIsEditPointMode(false);\r\n      setPointId(null);\r\n    }).catch(() => {\r\n      setShouldFetchData(false);\r\n      setIsEditPointMode(false);\r\n      setPointId(null);\r\n    })\r\n  };\r\n\r\n  const hide = () => {\r\n    if (!isEditPointMode) {\r\n      clearForm();\r\n    }\r\n    onHide();\r\n  };\r\n\r\n  useEffect(() => {\r\n    get(TYPE_OF_OBJECT_URL).then(({ data }) => {\r\n      setTypes(data);\r\n    });\r\n    get(OWNER_TYPES_URL).then(({ data }) => {\r\n      setOwnerTypes(data);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isEditPointMode && pointId) {\r\n      get(`${POINT_URL}/${pointId}`).then(({ data }) => {\r\n        const type = types.find(({ id }) => id === data.type);\r\n        const ownerType = ownerTypes.find(({ id }) => id === data.owner_type.id);\r\n        if (type) {\r\n          setType(type);\r\n        }\r\n        if (ownerType) {\r\n          setOwnerType(ownerType);\r\n        }\r\n        setName(data.name);\r\n        setDescription(data.description);\r\n      })\r\n    }\r\n  }, [pointId, isEditPointMode]);\r\n\r\n  return (\r\n    <VerticallyCenteredModal size='lg' show={show} onHide={() => hide()} header=\"Додати або редагувати точку\">\r\n      <Form>\r\n        <Form.Group>\r\n          <Dropdown>\r\n            <Dropdown.Toggle size='sm' variant='success'>\r\n              {type.name || emptyState.typeOfObject}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu className=\"form-dropdown\">\r\n              {types.length && types.map(typeOfObject => (\r\n                <Dropdown.Item\r\n                  key={typeOfObject.id}\r\n                  active={typeOfObject === type}\r\n                  onClick={() => setType(typeOfObject)}\r\n                >\r\n                  {typeOfObject.name}\r\n                </Dropdown.Item>\r\n              ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Dropdown>\r\n            <Dropdown.Toggle size='sm' variant='success'>\r\n              {ownerType.type || emptyState.ownerType}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n              {ownerTypes.length && ownerTypes.map(type => (\r\n                <Dropdown.Item\r\n                  key={type.id}\r\n                  active={type === ownerType}\r\n                  onClick={() => setOwnerType(type)}\r\n                >\r\n                  {type.type}\r\n                </Dropdown.Item>\r\n              ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Enter name</Form.Label>\r\n          <Form.Control\r\n            type='input'\r\n            value={name}\r\n            onChange={e => setName(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Enter description</Form.Label>\r\n          <Form.Control\r\n            as='textarea'\r\n            rows='3'\r\n            value={description}\r\n            onChange={e => setDescription(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n\r\n        {isEditPointMode\r\n          ? <SubmitForm onSave={editPoint} />\r\n          : <SubmitForm onSave={addPoint} />\r\n        }\r\n      </Form>\r\n    </VerticallyCenteredModal>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { SketchPicker } from 'react-color';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport { post, get, put } from '../utils/httpService';\r\nimport { POLYGON_URL } from '../utils/constants';\r\n\r\nimport { VerticallyCenteredModal } from './modal';\r\nimport { SubmitForm } from './submitForm';\r\nimport { useEffect } from 'react';\r\n\r\nconst initialState = {\r\n  form: {\r\n    brushColor: {\r\n      r: 0,\r\n      g: 0,\r\n      b: 0,\r\n      a: 1,\r\n    },\r\n    lineThickness: 1,\r\n    name: '',\r\n    type: 'poligon',\r\n    description: '',\r\n  },\r\n};\r\n\r\nexport const AddPolygonModal = ({\r\n  onHide,\r\n  show,\r\n  coordinates,\r\n  setShouldFetchData,\r\n  setNewPolygonCoordinates,\r\n  user,\r\n  isEditPolygonMode,\r\n  setIsEditPolygonMode,\r\n  polygonId,\r\n  setPolygonId,\r\n}) => {\r\n  const [lineThickness, setLineThickness] = useState(\r\n    initialState.form.lineThickness\r\n  );\r\n  const [color, setColor] = useState(initialState.form.brushColor);\r\n  const [name, setName] = useState(initialState.form.name);\r\n  const [description, setDescription] = useState(initialState.form.description);\r\n\r\n  const clearForm = () => {\r\n    setLineThickness(initialState.form.lineThickness);\r\n    setColor(initialState.form.brushColor);\r\n    setName(initialState.form.name);\r\n    setDescription(initialState.form.description);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (polygonId && isEditPolygonMode) {\r\n      get(`${POLYGON_URL}/${polygonId}`).then(({ data }) => {\r\n        setLineThickness(data.line_thickness);\r\n        setColor({\r\n          r: data.brush_color_r,\r\n          g: data.bruch_color_g,\r\n          b: data.brush_color_b,\r\n          a: data.brush_alfa,\r\n        });\r\n        setName(data.name);\r\n        setDescription(data.description);\r\n      });\r\n    }\r\n  }, [polygonId, isEditPolygonMode]);\r\n\r\n  const addPolygon = (emission) => {\r\n    post(POLYGON_URL, {\r\n      brush_color_r: color.r,\r\n      bruch_color_g: color.g,\r\n      brush_color_b: color.b,\r\n      brush_alfa: color.a,\r\n      line_collor_r: color.r,\r\n      line_color_g: color.g,\r\n      line_color_b: color.b,\r\n      line_alfa: color.a,\r\n      line_thickness: Number(lineThickness),\r\n      name,\r\n      id_of_user: Number(user.id_of_user),\r\n      id_of_expert: Number(user.id_of_expert),\r\n      type: initialState.form.type,\r\n      description,\r\n      points: coordinates.map((point, index) => ({\r\n        latitude: point.lat,\r\n        longitude: point.lng,\r\n        order123: index + 1,\r\n      })),\r\n      emission,\r\n    })\r\n      .then(() => {\r\n        clearForm();\r\n        onHide();\r\n        setNewPolygonCoordinates([]);\r\n        setShouldFetchData(true);\r\n      })\r\n      .catch(() => {\r\n        setNewPolygonCoordinates([]);\r\n        setShouldFetchData(false);\r\n      });\r\n  };\r\n\r\n  const editPolygon = (emission) => {\r\n    put(`${POLYGON_URL}/${polygonId}`, {\r\n      brush_color_r: color.r,\r\n      bruch_color_g: color.g,\r\n      brush_color_b: color.b,\r\n      brush_alfa: color.a,\r\n      line_collor_r: color.r,\r\n      line_color_g: color.g,\r\n      line_color_b: color.b,\r\n      line_alfa: color.a,\r\n      line_thickness: Number(lineThickness),\r\n      name,\r\n      description,\r\n      emission,\r\n    })\r\n      .then(() => {\r\n        clearForm();\r\n        onHide();\r\n        setNewPolygonCoordinates([]);\r\n        setShouldFetchData(true);\r\n        setIsEditPolygonMode(false);\r\n        setPolygonId(null);\r\n      })\r\n      .catch(() => {\r\n        setIsEditPolygonMode(false);\r\n        setPolygonId(null);\r\n        setNewPolygonCoordinates([]);\r\n        setShouldFetchData(false);\r\n      });\r\n  };\r\n\r\n  const hide = () => {\r\n    if (!isEditPolygonMode) {\r\n      clearForm();\r\n    }\r\n    onHide();\r\n  };\r\n\r\n  return (\r\n    <VerticallyCenteredModal\r\n      size='lg'\r\n      show={show}\r\n      onHide={() => hide()}\r\n      header='Додати або редагувати полігон'\r\n    >\r\n      <Form>\r\n        <Form.Group>\r\n          <Form.Label>\r\n            Choose color of the polygon and line thickness\r\n          </Form.Label>\r\n          <Form.Control\r\n            type='number'\r\n            value={lineThickness}\r\n            onChange={(e) => setLineThickness(e.target.value)}\r\n          />\r\n          <br />\r\n          <SketchPicker\r\n            color={color}\r\n            onChangeComplete={({ rgb }) => setColor(rgb)}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Enter name</Form.Label>\r\n          <Form.Control\r\n            type='input'\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Enter description</Form.Label>\r\n          <Form.Control\r\n            as='textarea'\r\n            rows='3'\r\n            value={description}\r\n            onChange={(e) => setDescription(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        {isEditPolygonMode ? (\r\n          <SubmitForm onSave={editPolygon} />\r\n        ) : (\r\n          <SubmitForm onSave={addPolygon} />\r\n        )}\r\n      </Form>\r\n    </VerticallyCenteredModal>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { get } from '../utils/httpService';\r\nimport { EXPERTS_URL } from '../utils/constants';\r\n\r\nimport './filtration.css';\r\n\r\nexport const Filtration = ({ user, setFilteredItems }) => {\r\n  let filtrationForm;\r\n  const [existingExperts, setExistingExperts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    get(EXPERTS_URL).then(({ data }) => {\r\n      setExistingExperts(data);\r\n    });\r\n  }, []);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { expertCheckbox: expertCheckboxes, myCheckbox } = filtrationForm;\r\n    const selectedExperts = Array.from(expertCheckboxes)\r\n      .filter(({ checked }) => checked)\r\n      .map(({ value }) => existingExperts.find(\r\n        ({ id_of_expert }) => +id_of_expert === +value\r\n      ));\r\n\r\n    if (myCheckbox && myCheckbox.checked) {\r\n      setFilteredItems({ isMyObjectsSelectionChecked: true, items: [...selectedExperts, user] });\r\n    }\r\n    else {\r\n      setFilteredItems({ isMyObjectsSelectionChecked: false, items: selectedExperts });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={submitHandler}\r\n      className=\"filtration-form d-flex justify-content-center flex-column\"\r\n      ref={(form) => (filtrationForm = form)}\r\n    >\r\n      <Form.Group>\r\n        <Form.Label>\r\n          <b>Оберіть експерта</b>\r\n        </Form.Label>\r\n        {existingExperts.length &&\r\n          existingExperts.map((expert) => (\r\n            <Form.Check\r\n              label={expert.expert_name}\r\n              type=\"checkbox\"\r\n              value={expert.id_of_expert}\r\n              key={expert.id_of_expert}\r\n              name=\"expertCheckbox\"\r\n            />\r\n          ))}\r\n        {user && (\r\n          <Form.Check\r\n            label=\"Мої об'єкти\"\r\n            type=\"checkbox\"\r\n            value={user.id_of_user}\r\n            key={user.id_of_user}\r\n            name=\"myCheckbox\"\r\n          />\r\n        )}\r\n      </Form.Group>\r\n\r\n      <Button variant=\"primary\" type=\"submit\" className=\"text-center\">\r\n        Застосувати\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Navbar } from 'react-bootstrap';\r\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\r\n\r\nimport { get } from '../utils/httpService';\r\nimport {\r\n  POLYGONS_URL,\r\n  POINTS_URL,\r\n  MAP_CENTER_COORDS,\r\n  OPEN_STREET_MAP_URL,\r\n} from '../utils/constants';\r\nimport { removeObjectDuplicates } from '../utils/helpers';\r\n\r\nimport { Polygons } from './polygons';\r\nimport { Points } from './points';\r\nimport { AddPointModal } from './addPointModal';\r\nimport { AddPolygonModal } from './addPolygonModal';\r\nimport { Filtration } from './filtration';\r\n\r\nimport './map.css';\r\nimport { EnvironmentsInfoContext } from './context/environmentsInfoContext';\r\nimport { useContext } from 'react';\r\n\r\nconst initialState = {\r\n  points: [],\r\n  polygons: [\r\n    {\r\n      name: '',\r\n      expertName: '',\r\n      polygonPoints: [],\r\n    },\r\n  ],\r\n  filteredPolygons: [],\r\n  filteredItems: {\r\n    isMyObjectsSelectionChecked: false,\r\n    items: [],\r\n  },\r\n  filteredPoints: [],\r\n  isAddPointModeEnabled: false,\r\n  isAddPolygonModeEnabled: false,\r\n  showPointModal: false,\r\n  showPolygonModal: false,\r\n  newPointCoordinates: [],\r\n  newPolygonCoordinates: [],\r\n  shouldFetchData: true,\r\n  isEditPointMode: false,\r\n  pointId: null,\r\n  isEditPolygonMode: false,\r\n  polygonId: null,\r\n};\r\n\r\nconst buttonText = (geographicalObj, isModeEnabled) =>\r\n  isModeEnabled\r\n    ? `Disable add ${geographicalObj} mode`\r\n    : `Add ${geographicalObj} to the map`;\r\n\r\nexport const MapView = ({ user }) => {\r\n  const [filteredItems, setFilteredItems] = useState(\r\n    initialState.filteredItems\r\n  );\r\n  const [shouldFetchData, setShouldFetchData] = useState(\r\n    initialState.shouldFetchData\r\n  );\r\n\r\n  // points\r\n  const [filteredPoints, setFilteredPoints] = useState(\r\n    initialState.filteredPoints\r\n  );\r\n  const [isAddPointModeEnabled, setAddPointMode] = useState(\r\n    initialState.isAddPointModeEnabled\r\n  );\r\n  const [showPointModal, setShowPointModal] = useState(\r\n    initialState.showPointModal\r\n  );\r\n  const [newPointCoordinates, setNewPointCoordinates] = useState(\r\n    initialState.newPointCoordinates\r\n  );\r\n\r\n  // polygons\r\n  const [filteredPolygons, setFilteredPolygons] = useState(\r\n    initialState.filteredPolygons\r\n  );\r\n  const [isAddPolygonModeEnabled, setAddPolygonMode] = useState(\r\n    initialState.isAddPolygonModeEnabled\r\n  );\r\n  const [showPolygonModal, setShowPolygonModal] = useState(\r\n    initialState.showPolygonModal\r\n  );\r\n  const [newPolygonCoordinates, setNewPolygonCoordinates] = useState(\r\n    initialState.newPolygonCoordinates\r\n  );\r\n\r\n  // edit point\r\n  const [isEditPointMode, setIsEditPointMode] = useState(\r\n    initialState.isEditPointMode\r\n  );\r\n  const [pointId, setPointId] = useState(initialState.pointId);\r\n\r\n  //edit polygon\r\n  const [isEditPolygonMode, setIsEditPolygonMode] = useState(\r\n    initialState.isEditPolygonMode\r\n  );\r\n  const [polygonId, setPolygonId] = useState(initialState.polygonId);\r\n\r\n  //environmentsInfo\r\n  const { environmentsInfo, setEnvironmentsInfo } = useContext(\r\n    EnvironmentsInfoContext\r\n  );\r\n\r\n  const fetchData = () => {\r\n    const idEnvironment = environmentsInfo.selected.id;\r\n\r\n    get(`${POLYGONS_URL}?idEnvironment=${idEnvironment}`).then(({ data }) => {\r\n      setFilteredPolygons(data);\r\n      initialState.polygons = data;\r\n    });\r\n\r\n    get(`${POINTS_URL}?idEnvironment=${idEnvironment}`).then(({ data }) => {\r\n      setFilteredPoints(data);\r\n      initialState.points = data;\r\n    });\r\n  };\r\n\r\n  const filterByExpert = ({ id_of_expert: idOfExpert }) =>\r\n    filteredItems.items.some(({ id_of_expert }) => idOfExpert === id_of_expert);\r\n\r\n  const filterByUser = ({ id_of_user: idOfUser }) =>\r\n    filteredItems.items.some(({ id_of_user }) => idOfUser === id_of_user);\r\n\r\n  useEffect(() => {\r\n    if (environmentsInfo.environments.length && !environmentsInfo.selected) {\r\n      setEnvironmentsInfo({\r\n        selected: environmentsInfo.environments[0],\r\n        environments: environmentsInfo.environments,\r\n      });\r\n    }\r\n  }, [environmentsInfo.environments]);\r\n\r\n  useEffect(() => {\r\n    if (shouldFetchData && environmentsInfo.selected) {\r\n      fetchData();\r\n      setShouldFetchData(false);\r\n    }\r\n  }, [shouldFetchData, environmentsInfo.selected]);\r\n\r\n  useEffect(() => {\r\n    if (filteredItems.items.length) {\r\n      let filteredPolygons = [];\r\n      let filteredPoints = [];\r\n\r\n      filteredPolygons = initialState.polygons.filter(filterByExpert);\r\n      filteredPoints = initialState.points.filter(filterByExpert);\r\n\r\n      if (filteredItems.isMyObjectsSelectionChecked) {\r\n        const myPolygons = initialState.polygons.filter(filterByUser);\r\n        const myPoints = initialState.points.filter(filterByUser);\r\n\r\n        filteredPolygons = [...filteredPolygons, ...myPolygons];\r\n        filteredPoints = [...filteredPoints, ...myPoints];\r\n      }\r\n\r\n      filteredPoints = removeObjectDuplicates(filteredPoints, 'Id');\r\n      filteredPolygons = removeObjectDuplicates(filteredPolygons, 'polygonId');\r\n\r\n      setFilteredPoints(filteredPoints);\r\n      setFilteredPolygons(filteredPolygons);\r\n    } else {\r\n      setFilteredPoints(initialState.points);\r\n      setFilteredPolygons(initialState.polygons);\r\n    }\r\n  }, [filteredItems]);\r\n\r\n  const addGeographicalObjectToMap = ({ latlng: { lat, lng } }) => {\r\n    if (isAddPointModeEnabled) {\r\n      setNewPointCoordinates([lat, lng]);\r\n      setShowPointModal(true);\r\n      return;\r\n    }\r\n\r\n    if (isAddPolygonModeEnabled) {\r\n      setNewPolygonCoordinates([...newPolygonCoordinates, { lat, lng }]);\r\n    }\r\n  };\r\n\r\n  const finishPolygon = () => {\r\n    setAddPolygonMode(false);\r\n\r\n    if (newPolygonCoordinates.length >= 3) {\r\n      setShowPolygonModal(true);\r\n    } else {\r\n      setNewPolygonCoordinates([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LeafletMap\r\n        center={MAP_CENTER_COORDS}\r\n        zoom={6}\r\n        maxZoom={15}\r\n        attributionControl={true}\r\n        zoomControl={true}\r\n        doubleClickZoom={true}\r\n        scrollWheelZoom={true}\r\n        dragging={true}\r\n        animate={true}\r\n        easeLinearity={0.35}\r\n        onClick={addGeographicalObjectToMap}\r\n      >\r\n        <TileLayer url={OPEN_STREET_MAP_URL} />\r\n        <Polygons\r\n          polygons={filteredPolygons}\r\n          setPolygonId={setPolygonId}\r\n          setIsEditPolygonMode={setIsEditPolygonMode}\r\n          setShowPolygonModal={setShowPolygonModal}\r\n        />\r\n        <Points\r\n          points={filteredPoints}\r\n          setPointId={setPointId}\r\n          setIsEditPointMode={setIsEditPointMode}\r\n          setShowPointModal={setShowPointModal}\r\n        />\r\n      </LeafletMap>\r\n      {user && (\r\n        <Navbar expand='lg' className='map-options'>\r\n          <Button\r\n            size='sm'\r\n            variant={\r\n              isAddPointModeEnabled ? 'outline-danger' : 'outline-primary'\r\n            }\r\n            onClick={() => setAddPointMode(!isAddPointModeEnabled)}\r\n          >\r\n            {buttonText('point', isAddPointModeEnabled)}\r\n          </Button>\r\n          <Button\r\n            className='ml-3'\r\n            size='sm'\r\n            variant={\r\n              isAddPolygonModeEnabled ? 'outline-danger' : 'outline-primary'\r\n            }\r\n            onClick={() => setAddPolygonMode(!isAddPolygonModeEnabled)}\r\n          >\r\n            {buttonText('polygon', isAddPolygonModeEnabled)}\r\n          </Button>\r\n          {isAddPolygonModeEnabled && (\r\n            <Button\r\n              className='ml-3'\r\n              size='sm'\r\n              variant='outline-success'\r\n              onClick={finishPolygon}\r\n            >\r\n              Finish polygon\r\n            </Button>\r\n          )}\r\n        </Navbar>\r\n      )}\r\n\r\n      <Filtration user={user} setFilteredItems={setFilteredItems} />\r\n\r\n      <AddPointModal\r\n        show={showPointModal}\r\n        onHide={() => setShowPointModal(false)}\r\n        setShouldFetchData={setShouldFetchData}\r\n        coordinates={newPointCoordinates}\r\n        isEditPointMode={isEditPointMode}\r\n        setIsEditPointMode={setIsEditPointMode}\r\n        pointId={pointId}\r\n        setPointId={setPointId}\r\n        user={user}\r\n      />\r\n      <AddPolygonModal\r\n        show={showPolygonModal}\r\n        onHide={() => setShowPolygonModal(false)}\r\n        setShouldFetchData={setShouldFetchData}\r\n        setNewPolygonCoordinates={setNewPolygonCoordinates}\r\n        coordinates={newPolygonCoordinates}\r\n        user={user}\r\n        isEditPolygonMode={isEditPolygonMode}\r\n        setIsEditPolygonMode={setIsEditPolygonMode}\r\n        polygonId={polygonId}\r\n        setPolygonId={setPolygonId}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport './App.css';\r\nimport { MenuView } from './components/menu';\r\nimport { Home } from './components/home';\r\nimport { MapView } from './components/map';\r\n\r\nimport { get } from './utils/httpService';\r\nimport { ENVIRONMENTS_URL } from './utils/constants';\r\n\r\nimport {\r\n  EnvironmentsInfoContext,\r\n  environmentsInfoInitialState,\r\n} from './components/context/environmentsInfoContext';\r\n\r\nexport const App = () => {\r\n  const [user, setUser] = React.useState({});\r\n  const [environmentsInfo, setEnvironmentsInfo] = useState(\r\n    environmentsInfoInitialState\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    setUser(JSON.parse(sessionStorage.getItem('user')));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    get(ENVIRONMENTS_URL).then(({ data }) =>\r\n      setEnvironmentsInfo({\r\n        selected: null,\r\n        environments: data,\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <div className='App'>\r\n        <EnvironmentsInfoContext.Provider\r\n          value={{ environmentsInfo, setEnvironmentsInfo }}\r\n        >\r\n          <MenuView user={user} setUser={setUser} />\r\n          <Switch>\r\n            <Route exact path='/' component={Home} />\r\n            <Route path='/earth' component={() => <MapView user={user} />} />\r\n          </Switch>\r\n        </EnvironmentsInfoContext.Provider>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"react-date-range/dist/styles.css\";\r\nimport \"react-date-range/dist/theme/default.css\";\r\n\r\nimport { App } from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}